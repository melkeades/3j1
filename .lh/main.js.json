{
    "sourceFile": "main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 257,
            "patches": [
                {
                    "date": 1671891773639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1671891834673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,8 @@\n grassAmbientOcclusionTexture.repeat.set(8, 8)\n grassNormalTexture.repeat.set(8, 8)\n grassRoughnessTexture.repeat.set(8, 8)\n \n-grassColorTexture = THREE.RepeatWrapping\n-grassAmbientOcclusionTexture = THREE.RepeatWrapping\n-grassNormalTexture = THREE.RepeatWrapping\n-grassRoughnessTexture = THREE.RepeatWrapping\n-\n const standartMaterial = new THREE.MeshStandardMaterial()\n standartMaterial.roughness = 0.2\n standartMaterial.metalness = 0.2\n \n"
                },
                {
                    "date": 1671892002163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,17 @@\n grassAmbientOcclusionTexture.repeat.set(8, 8)\n grassNormalTexture.repeat.set(8, 8)\n grassRoughnessTexture.repeat.set(8, 8)\n \n+grassColorTexture.wrapS = THREE.RepeatWrapping\n+grassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping\n+grassNormalTexture.wrapS = THREE.RepeatWrapping\n+grassRoughnessTexture.wrapS = THREE.RepeatWrapping\n+\n+grassColorTexture.wrapT = THREE.RepeatWrapping\n+grassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping\n+grassNormalTexture.wrapT = THREE.RepeatWrapping\n+grassRoughnessTexture.wrapT = THREE.RepeatWrapping\n const standartMaterial = new THREE.MeshStandardMaterial()\n standartMaterial.roughness = 0.2\n standartMaterial.metalness = 0.2\n \n"
                },
                {
                    "date": 1671892053234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,12 @@\n const grassAmbientOcclusionTexture = textureLoader.load('/grass/ambientOcclusion.jpg')\n const grassNormalTexture = textureLoader.load('/grass/normal.jpg')\n const grassRoughnessTexture = textureLoader.load('/grass/roughness.jpg')\n \n-grassColorTexture.repeat.set(8, 8)\n-grassAmbientOcclusionTexture.repeat.set(8, 8)\n-grassNormalTexture.repeat.set(8, 8)\n-grassRoughnessTexture.repeat.set(8, 8)\n+grassColorTexture.repeat.set(16, 16)\n+grassAmbientOcclusionTexture.repeat.set(16, 16)\n+grassNormalTexture.repeat.set(16, 16)\n+grassRoughnessTexture.repeat.set(16, 16)\n \n grassColorTexture.wrapS = THREE.RepeatWrapping\n grassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping\n grassNormalTexture.wrapS = THREE.RepeatWrapping\n@@ -52,8 +52,9 @@\n grassColorTexture.wrapT = THREE.RepeatWrapping\n grassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping\n grassNormalTexture.wrapT = THREE.RepeatWrapping\n grassRoughnessTexture.wrapT = THREE.RepeatWrapping\n+\n const standartMaterial = new THREE.MeshStandardMaterial()\n standartMaterial.roughness = 0.2\n standartMaterial.metalness = 0.2\n \n"
                },
                {
                    "date": 1671892086690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n // Light\n const ambientLight = new THREE.AmbientLight(0x4444ff, 0.8)\n const directionLight = new THREE.DirectionalLight(0x3333ff, 0.8)\n directionLight.position.set(2, 2, 2)\n-const doorLight = new THREE.PointLight(0xff3300, 2, 10)\n+const doorLight = new THREE.PointLight(0xaa3300, 2, 10)\n doorLight.position.set(0, 1.1, 1.5)\n scene.add(ambientLight, directionLight, doorLight)\n \n // Camera\n"
                },
                {
                    "date": 1671892308951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,13 @@\n const doorLight = new THREE.PointLight(0xaa3300, 2, 10)\n doorLight.position.set(0, 1.1, 1.5)\n scene.add(ambientLight, directionLight, doorLight)\n \n+// Ghosts\n+const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n+const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n+const ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\n+\n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n camera.position.z = 4\n camera.position.y = 1\n"
                },
                {
                    "date": 1671892334455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n // Ghosts\n const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n const ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\n-\n+scene.add(ghost1, ghost2, ghost3)\n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n camera.position.z = 4\n camera.position.y = 1\n"
                },
                {
                    "date": 1671892985555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,9 @@\n const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n const ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\n scene.add(ghost1, ghost2, ghost3)\n+\n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n camera.position.z = 4\n camera.position.y = 1\n@@ -173,10 +174,12 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n+const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n+  const elapsedTime = clock.getElapsedTime()\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671893222232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,11 @@\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n+  ghost1.position.x = Math.cos(elapsedTime * 3)\n+  ghost1.position.y = Math.sin(elapsedTime * 3)\n+\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671893261337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,11 +177,11 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime()\n-  ghost1.position.x = Math.cos(elapsedTime * 3)\n-  ghost1.position.y = Math.sin(elapsedTime * 3)\n+  const elapsedTime = clock.getElapsedTime() * 3\n+  ghost1.position.x = Math.cos(elapsedTime)\n+  ghost1.position.y = Math.sin(elapsedTime)\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893292103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime() * 3\n+  const elapsedTime = clock.getElapsedTime() * 0.5\n   ghost1.position.x = Math.cos(elapsedTime)\n   ghost1.position.y = Math.sin(elapsedTime)\n \n   controls.update()\n"
                },
                {
                    "date": 1671893300672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime() * 0.5\n+  const elapsedTime = clock.getElapsedTime() * 2\n   ghost1.position.x = Math.cos(elapsedTime)\n   ghost1.position.y = Math.sin(elapsedTime)\n \n   controls.update()\n"
                },
                {
                    "date": 1671893324972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,10 +178,10 @@\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 2\n-  ghost1.position.x = Math.cos(elapsedTime)\n-  ghost1.position.y = Math.sin(elapsedTime)\n+  ghost1.position.x = Math.cos(elapsedTime) * 4\n+  ghost1.position.y = Math.sin(elapsedTime) * 4\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893332221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,10 +178,10 @@\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 2\n-  ghost1.position.x = Math.cos(elapsedTime) * 4\n-  ghost1.position.y = Math.sin(elapsedTime) * 4\n+  ghost1.position.x = Math.cos(elapsedTime) * 3\n+  ghost1.position.y = Math.sin(elapsedTime) * 3\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893364440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime() * 2\n+  const elapsedTime = clock.getElapsedTime() / 2\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.y = Math.sin(elapsedTime) * 3\n \n   controls.update()\n"
                },
                {
                    "date": 1671893379309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime() / 2\n+  const elapsedTime = clock.getElapsedTime() * 0.7\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.y = Math.sin(elapsedTime) * 3\n \n   controls.update()\n"
                },
                {
                    "date": 1671893422629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,11 +177,11 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime() * 0.7\n+  const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 3\n+  ghost1.position.z = Math.sin(elapsedTime) * 3\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893483533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,8 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n+  ghost1.position.y = Math.sin(elapsedTime) * 3\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893498091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 3\n+  ghost1.position.y = Math.sin(elapsedTime) * 2\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893507967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 2\n+  ghost1.position.y = Math.sin(elapsedTime) * 2 + 0.5\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893522343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 2 + 0.5\n+  ghost1.position.y = Math.sin(elapsedTime) * 2 + 0.7\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893539567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 2 + 0.7\n+  ghost1.position.y = Math.sin(elapsedTime) * 2 + 10.7\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893546181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 2 + 10.7\n+  ghost1.position.y = Math.sin(elapsedTime) * 2 + 1\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893562236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime() * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 2 + 1\n+  ghost1.position.y = Math.sin(elapsedTime) * 2\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893585097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,12 @@\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n   ghost1.position.y = Math.sin(elapsedTime) * 2\n \n+  ghost2.position.x = Math.cos(elapsedTime) * 3\n+  ghost2.position.z = Math.sin(elapsedTime) * 3\n+  ghost2.position.y = Math.sin(elapsedTime) * 2\n+\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671893677285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,13 +177,16 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime() * 0.8\n+  const elapsedTime = clock.getElapsedTime()\n+\n+  const ghost1Angle = elapsedTime * 0.8\n   ghost1.position.x = Math.cos(elapsedTime) * 3\n   ghost1.position.z = Math.sin(elapsedTime) * 3\n   ghost1.position.y = Math.sin(elapsedTime) * 2\n \n+  const ghost2Angle = -elapsedTime * 0.7\n   ghost2.position.x = Math.cos(elapsedTime) * 3\n   ghost2.position.z = Math.sin(elapsedTime) * 3\n   ghost2.position.y = Math.sin(elapsedTime) * 2\n \n"
                },
                {
                    "date": 1671893718987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,16 +180,16 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n \n   const ghost1Angle = elapsedTime * 0.8\n-  ghost1.position.x = Math.cos(elapsedTime) * 3\n-  ghost1.position.z = Math.sin(elapsedTime) * 3\n-  ghost1.position.y = Math.sin(elapsedTime) * 2\n+  ghost1.position.x = Math.cos(ghost1Angle) * 3\n+  ghost1.position.z = Math.sin(ghost1Angle) * 3\n+  ghost1.position.y = Math.sin(ghost1Angle) * 2\n \n   const ghost2Angle = -elapsedTime * 0.7\n-  ghost2.position.x = Math.cos(elapsedTime) * 3\n-  ghost2.position.z = Math.sin(elapsedTime) * 3\n-  ghost2.position.y = Math.sin(elapsedTime) * 2\n+  ghost2.position.x = Math.cos(ghost2Angle) * 3\n+  ghost2.position.z = Math.sin(ghost2Angle) * 3\n+  ghost2.position.y = Math.sin(ghost2Angle) * 2\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671893824986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,8 +189,13 @@\n   ghost2.position.x = Math.cos(ghost2Angle) * 3\n   ghost2.position.z = Math.sin(ghost2Angle) * 3\n   ghost2.position.y = Math.sin(ghost2Angle) * 2\n \n+  const ghost3Angle = elapsedTime * 0.8\n+  ghost3.position.x = Math.cos(ghost3Angle) * 3\n+  ghost3.position.z = Math.sin(ghost3Angle) * 3\n+  ghost3.position.y = Math.sin(ghost3Angle) * 2\n+\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671893842006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n   ghost2.position.x = Math.cos(ghost2Angle) * 3\n   ghost2.position.z = Math.sin(ghost2Angle) * 3\n   ghost2.position.y = Math.sin(ghost2Angle) * 2\n \n-  const ghost3Angle = elapsedTime * 0.8\n+  const ghost3Angle = elapsedTime * 0.9\n   ghost3.position.x = Math.cos(ghost3Angle) * 3\n   ghost3.position.z = Math.sin(ghost3Angle) * 3\n   ghost3.position.y = Math.sin(ghost3Angle) * 2\n \n"
                },
                {
                    "date": 1671894125046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\n import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\n import * as dat from 'dat.gui'\n+import { render } from 'stylus'\n \n const select = (e) => document.querySelector(e)\n \n // Settings\n@@ -174,8 +175,16 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n+// Shadows\n+renderer.shadowMap.enabled = true\n+directionLight.castShadow = true\n+doorLight.castShadow = true\n+ghost1.castShadow = true\n+ghost2.castShadow = true\n+ghost3.castShadow = true\n+\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671894154725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,12 @@\n const doorLight = new THREE.PointLight(0xaa3300, 2, 10)\n doorLight.position.set(0, 1.1, 1.5)\n scene.add(ambientLight, directionLight, doorLight)\n \n+// Shadows\n+renderer.shadowMap.enabled = true\n+directionLight.castShadow = true\n+\n // Ghosts\n const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n const ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\n@@ -175,16 +179,8 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n-// Shadows\n-renderer.shadowMap.enabled = true\n-directionLight.castShadow = true\n-doorLight.castShadow = true\n-ghost1.castShadow = true\n-ghost2.castShadow = true\n-ghost3.castShadow = true\n-\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671894160831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\n import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\n import * as dat from 'dat.gui'\n-import { render } from 'stylus'\n \n const select = (e) => document.querySelector(e)\n \n // Settings\n@@ -152,10 +151,8 @@\n doorLight.position.set(0, 1.1, 1.5)\n scene.add(ambientLight, directionLight, doorLight)\n \n // Shadows\n-renderer.shadowMap.enabled = true\n-directionLight.castShadow = true\n \n // Ghosts\n const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n"
                },
                {
                    "date": 1671894260136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,10 +150,8 @@\n const doorLight = new THREE.PointLight(0xaa3300, 2, 10)\n doorLight.position.set(0, 1.1, 1.5)\n scene.add(ambientLight, directionLight, doorLight)\n \n-// Shadows\n-\n // Ghosts\n const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n const ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\n@@ -176,8 +174,10 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n+// Shadows\n+renderer.shadowMap = true\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671894275540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,8 +176,9 @@\n controls.enableDamping = true\n \n // Shadows\n renderer.shadowMap = true\n+directionLight.castShadow = true\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671894313101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,12 @@\n \n // Shadows\n renderer.shadowMap = true\n directionLight.castShadow = true\n+doorLight.castShadow = true\n+ghost1.castShadow = true\n+ghost2.castShadow = true\n+ghost3.castShadow = true\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671894395930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n   const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n   grave.position.set(x, 0.19, z)\n   grave.rotation.y = (Math.random() - 0.5) / 3\n   grave.rotation.z = (Math.random() - 0.5) / 5\n+  grave.castShadow = true\n   graves.add(grave)\n }\n scene.add(graves)\n const floor = new THREE.Mesh(\n"
                },
                {
                    "date": 1671894455759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,10 @@\n doorLight.castShadow = true\n ghost1.castShadow = true\n ghost2.castShadow = true\n ghost3.castShadow = true\n+floor.receiveShadow = true\n+\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671894513613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,9 @@\n doorLight.castShadow = true\n ghost1.castShadow = true\n ghost2.castShadow = true\n ghost3.castShadow = true\n+walls.castShadow = true\n floor.receiveShadow = true\n \n const clock = new THREE.Clock()\n // Updated\n"
                },
                {
                    "date": 1671894546570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,8 +183,10 @@\n ghost1.castShadow = true\n ghost2.castShadow = true\n ghost3.castShadow = true\n walls.castShadow = true\n+bush1.castShadow = true\n+bush2.castShadow = true\n floor.receiveShadow = true\n \n const clock = new THREE.Clock()\n // Updated\n"
                },
                {
                    "date": 1671894677491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n // Shadows\n-renderer.shadowMap = true\n+renderer.shadowMap.enabled = true\n directionLight.castShadow = true\n doorLight.castShadow = true\n ghost1.castShadow = true\n ghost2.castShadow = true\n"
                },
                {
                    "date": 1671894733576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n const graveGeometry = new THREE.BoxGeometry(0.3, 0.4, 0.1)\n const graveMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 })\n for (let i = 0; i < 50; i++) {\n   const angle = Math.random() * Math.PI * 2\n-  const radius = 3 + Math.random() * 5\n+  const radius = 3 + Math.random() * 4\n   const x = Math.sin(angle) * radius\n   const z = Math.cos(angle) * radius\n   const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n   grave.position.set(x, 0.19, z)\n"
                },
                {
                    "date": 1671894749885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n const graveGeometry = new THREE.BoxGeometry(0.3, 0.4, 0.1)\n const graveMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 })\n for (let i = 0; i < 50; i++) {\n   const angle = Math.random() * Math.PI * 2\n-  const radius = 3 + Math.random() * 4\n+  const radius = 2 + Math.random() * 5\n   const x = Math.sin(angle) * radius\n   const z = Math.cos(angle) * radius\n   const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n   grave.position.set(x, 0.19, z)\n"
                },
                {
                    "date": 1671894761280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n const graveGeometry = new THREE.BoxGeometry(0.3, 0.4, 0.1)\n const graveMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 })\n for (let i = 0; i < 50; i++) {\n   const angle = Math.random() * Math.PI * 2\n-  const radius = 2 + Math.random() * 5\n+  const radius = 2.5 + Math.random() * 5\n   const x = Math.sin(angle) * radius\n   const z = Math.cos(angle) * radius\n   const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n   grave.position.set(x, 0.19, z)\n"
                },
                {
                    "date": 1671894904299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,9 @@\n controls.enableDamping = true\n \n // Shadows\n renderer.shadowMap.enabled = true\n+renderer.shadowMap.type = THREE.PCFSoftShadowMap\n directionLight.castShadow = true\n doorLight.castShadow = true\n ghost1.castShadow = true\n ghost2.castShadow = true\n"
                },
                {
                    "date": 1671895034977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,12 @@\n bush1.castShadow = true\n bush2.castShadow = true\n floor.receiveShadow = true\n \n+doorLight.shadow.mapSize.width = 256\n+doorLight.shadow.mapSize.height = 256\n+doorLight.shadow.camera.far = 7\n+\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n"
                },
                {
                    "date": 1671900480123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,145 +20,13 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const doorColorTexture = textureLoader.load('door/color.jpg')\n-const doorAlphaTexture = textureLoader.load('door/alpha.jpg')\n-const doorAmbientOcclusionTexture = textureLoader.load('door/ambientocclusion.jpg')\n-const doorHeightTexture = textureLoader.load('door/height.jpg')\n-const doorNormalTexture = textureLoader.load('door/normal.jpg')\n-const doorRoughnessTexture = textureLoader.load('door/roughness.jpg')\n-const doorMetalnessTexture = textureLoader.load('door/metalness.jpg')\n \n-const bricksColorTexture = textureLoader.load('/bricks/color.jpg')\n-const bricksAmbientOcclusionTexture = textureLoader.load('/bricks/ambientOcclusion.jpg')\n-const bricksNormalTexture = textureLoader.load('/bricks/normal.jpg')\n-const bricksRoughnessTexture = textureLoader.load('/bricks/roughness.jpg')\n-\n-const grassColorTexture = textureLoader.load('/grass/color.jpg')\n-const grassAmbientOcclusionTexture = textureLoader.load('/grass/ambientOcclusion.jpg')\n-const grassNormalTexture = textureLoader.load('/grass/normal.jpg')\n-const grassRoughnessTexture = textureLoader.load('/grass/roughness.jpg')\n-\n-grassColorTexture.repeat.set(16, 16)\n-grassAmbientOcclusionTexture.repeat.set(16, 16)\n-grassNormalTexture.repeat.set(16, 16)\n-grassRoughnessTexture.repeat.set(16, 16)\n-\n-grassColorTexture.wrapS = THREE.RepeatWrapping\n-grassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping\n-grassNormalTexture.wrapS = THREE.RepeatWrapping\n-grassRoughnessTexture.wrapS = THREE.RepeatWrapping\n-\n-grassColorTexture.wrapT = THREE.RepeatWrapping\n-grassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping\n-grassNormalTexture.wrapT = THREE.RepeatWrapping\n-grassRoughnessTexture.wrapT = THREE.RepeatWrapping\n-\n-const standartMaterial = new THREE.MeshStandardMaterial()\n-standartMaterial.roughness = 0.2\n-standartMaterial.metalness = 0.2\n-\n // MESH\n \n-// House\n-const house = new THREE.Group()\n-scene.add(house)\n-\n-const walls = new THREE.Mesh(\n-  new THREE.BoxGeometry(2, 1, 2),\n-  new THREE.MeshStandardMaterial({\n-    map: bricksColorTexture,\n-    aoMap: bricksAmbientOcclusionTexture,\n-    normalMap: bricksNormalTexture,\n-    roughnessMap: bricksRoughnessTexture,\n-  })\n-)\n-\n-walls.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array, 2))\n-\n-walls.position.y = 0.5\n-house.add(walls)\n-const roof = new THREE.Mesh(new THREE.ConeGeometry(1.7, 1, 4), new THREE.MeshStandardMaterial({ color: 0x333300 }))\n-roof.position.y = 1.5\n-roof.rotation.y = Math.PI / 4\n-house.add(roof)\n-const door = new THREE.Mesh(\n-  new THREE.PlaneGeometry(0.9, 0.9, 100, 100),\n-  new THREE.MeshStandardMaterial({\n-    map: doorColorTexture,\n-    transparent: true,\n-    alphaMap: doorAlphaTexture,\n-    aoMap: doorAmbientOcclusionTexture,\n-    displacementMap: doorHeightTexture,\n-    // wireframe: true,\n-    displacementScale: 0.1,\n-    normalMap: doorNormalTexture,\n-    // metalness: doorMetalnessTexture,\n-    roughness: doorRoughnessTexture,\n-  })\n-)\n-door.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array, 2))\n-door.position.set(0, 0.4, 1.001)\n-house.add(door)\n-\n-// Bush\n-const bushGeometry = new THREE.SphereGeometry(1, 16, 16)\n-const bushMaterial = new THREE.MeshStandardMaterial({ color: 0x55aa55 })\n-\n-const bush1 = new THREE.Mesh(bushGeometry, bushMaterial)\n-const bush2 = new THREE.Mesh(bushGeometry, bushMaterial)\n-bush1.scale.set(0.2, 0.2, 0.2)\n-bush1.position.set(0.7, 0.2, 1.3)\n-bush2.scale.set(0.1, 0.1, 0.1)\n-bush2.position.set(-0.5, 0.1, 1.3)\n-house.add(bush1, bush2)\n-\n-// Graves\n-const graves = new THREE.Group()\n-const graveGeometry = new THREE.BoxGeometry(0.3, 0.4, 0.1)\n-const graveMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 })\n-for (let i = 0; i < 50; i++) {\n-  const angle = Math.random() * Math.PI * 2\n-  const radius = 2.5 + Math.random() * 5\n-  const x = Math.sin(angle) * radius\n-  const z = Math.cos(angle) * radius\n-  const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n-  grave.position.set(x, 0.19, z)\n-  grave.rotation.y = (Math.random() - 0.5) / 3\n-  grave.rotation.z = (Math.random() - 0.5) / 5\n-  grave.castShadow = true\n-  graves.add(grave)\n-}\n-scene.add(graves)\n-const floor = new THREE.Mesh(\n-  new THREE.PlaneGeometry(40, 40),\n-  new THREE.MeshStandardMaterial({\n-    map: grassColorTexture,\n-    aoMap: grassAmbientOcclusionTexture,\n-    normalMap: grassNormalTexture,\n-    roughnessMap: grassRoughnessTexture,\n-  })\n-)\n-floor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array, 2))\n-\n-floor.rotation.x = -Math.PI / 2\n-scene.add(floor)\n-\n // Light\n-const ambientLight = new THREE.AmbientLight(0x4444ff, 0.8)\n-const directionLight = new THREE.DirectionalLight(0x3333ff, 0.8)\n-directionLight.position.set(2, 2, 2)\n-const doorLight = new THREE.PointLight(0xaa3300, 2, 10)\n-doorLight.position.set(0, 1.1, 1.5)\n-scene.add(ambientLight, directionLight, doorLight)\n \n-// Ghosts\n-const ghost1 = new THREE.PointLight(0xff0000, 2, 3)\n-const ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\n-const ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\n-scene.add(ghost1, ghost2, ghost3)\n-\n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n camera.position.z = 4\n camera.position.y = 1\n@@ -175,45 +43,10 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n-// Shadows\n-renderer.shadowMap.enabled = true\n-renderer.shadowMap.type = THREE.PCFSoftShadowMap\n-directionLight.castShadow = true\n-doorLight.castShadow = true\n-ghost1.castShadow = true\n-ghost2.castShadow = true\n-ghost3.castShadow = true\n-walls.castShadow = true\n-bush1.castShadow = true\n-bush2.castShadow = true\n-floor.receiveShadow = true\n-\n-doorLight.shadow.mapSize.width = 256\n-doorLight.shadow.mapSize.height = 256\n-doorLight.shadow.camera.far = 7\n-\n-const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime()\n-\n-  const ghost1Angle = elapsedTime * 0.8\n-  ghost1.position.x = Math.cos(ghost1Angle) * 3\n-  ghost1.position.z = Math.sin(ghost1Angle) * 3\n-  ghost1.position.y = Math.sin(ghost1Angle) * 2\n-\n-  const ghost2Angle = -elapsedTime * 0.7\n-  ghost2.position.x = Math.cos(ghost2Angle) * 3\n-  ghost2.position.z = Math.sin(ghost2Angle) * 3\n-  ghost2.position.y = Math.sin(ghost2Angle) * 2\n-\n-  const ghost3Angle = elapsedTime * 0.9\n-  ghost3.position.x = Math.cos(ghost3Angle) * 3\n-  ghost3.position.z = Math.sin(ghost3Angle) * 3\n-  ghost3.position.y = Math.sin(ghost3Angle) * 2\n-\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671900510655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n const canvas = select('canvas.ca')\n let devicePixelRatio = Math.min(window.devicePixelRatio, 2)\n const scene = new THREE.Scene()\n let sizes = { width: window.innerWidth, height: window.innerHeight }\n-const sceneColor = 0x330077\n // Scene\n const fog = new THREE.Fog(sceneColor, 2, 20)\n scene.fog = fog\n \n"
                },
                {
                    "date": 1671900550854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,8 @@\n const canvas = select('canvas.ca')\n let devicePixelRatio = Math.min(window.devicePixelRatio, 2)\n const scene = new THREE.Scene()\n let sizes = { width: window.innerWidth, height: window.innerHeight }\n-// Scene\n-const fog = new THREE.Fog(sceneColor, 2, 20)\n-scene.fog = fog\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n"
                },
                {
                    "date": 1671900567994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n // Renderer\n const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas })\n renderer.setSize(sizes.width, sizes.height)\n renderer.setPixelRatio(devicePixelRatio)\n-renderer.setClearColor(sceneColor)\n // Controls\n const gui = new dat.GUI()\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n"
                },
                {
                    "date": 1671900874207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,19 @@\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n \n // MESH\n \n+// Particles\n+\n+const particlesGeometry = new THREE.SphereGeometry(1, 32, 32)\n+const particlesMaterial = new THREE.PointsMaterial({\n+  size: 0.02,\n+  sizeAttenuation: true,\n+})\n+\n+// Points\n+const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n+scene.add(particles)\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671901062741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,9 @@\n \n // MESH\n \n // Particles\n-\n-const particlesGeometry = new THREE.SphereGeometry(1, 32, 32)\n+const particlesGeometry = new THREE.BufferGeometry()\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.02,\n   sizeAttenuation: true,\n })\n"
                },
                {
                    "date": 1671904233265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,16 +21,22 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n+const count = 500\n+const position = new Float32Array(count * 3)\n+for (var i = 0; i < ar; i++) {\n+  let v = 9\n+}\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.02,\n   sizeAttenuation: true,\n })\n \n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n scene.add(particles)\n+\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671905141831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n const count = 500\n const position = new Float32Array(count * 3)\n-for (var i = 0; i < ar; i++) {\n-  let v = 9\n+for (var i = 0; i < count; i++) {\n+  position[i] = Math.random()\n }\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.02,\n   sizeAttenuation: true,\n"
                },
                {
                    "date": 1671905772780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = Math.random()\n }\n+particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.02,\n   sizeAttenuation: true,\n })\n"
                },
                {
                    "date": 1671908805453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n const particlesGeometry = new THREE.BufferGeometry()\n const count = 500\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n-  position[i] = Math.random()\n+  position[i] = (Math.random() - 0.5) * 5\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.02,\n"
                },
                {
                    "date": 1671908888723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500\n+const count = 500000000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908896292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500000000\n+const count = 500000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908905994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500000\n+const count = 5000000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908916701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 5000000\n+const count = 500000000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908922248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500000000\n+const count = 5000000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908977053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 5000000\n+const count = 50000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908983651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 50000\n+const count = 5000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671908990408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 5000\n+const count = 500\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671909004079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500\n+const count = 5000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671909021860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 5000\n+const count = 500000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671909131993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500000\n+const count = 500\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671909158123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 500\n+const count = 5000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671909209086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   position[i] = (Math.random() - 0.5) * 5\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n-  size: 0.02,\n+  size: 0.1,\n   sizeAttenuation: true,\n })\n \n // Points\n"
                },
                {
                    "date": 1671909344204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n+const particleTexture = textureLoader.load('particles/11.png')\n \n // MESH\n \n // Particles\n"
                },
                {
                    "date": 1671909397561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n+  map: particleTexture,\n })\n \n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671909454507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n   map: particleTexture,\n+  color: 0xff88cc,\n })\n \n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671909481928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('particles/11.png')\n+const particleTexture = textureLoader.load('particles/2.png')\n \n // MESH\n \n // Particles\n"
                },
                {
                    "date": 1671909584195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,10 @@\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n-  map: particleTexture,\n+  transparent: true,\n+  alphaMap: particleTexture,\n   color: 0xff88cc,\n })\n \n // Points\n"
                },
                {
                    "date": 1671909590907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n-  transparent: true,\n+  // transparent: true,\n   alphaMap: particleTexture,\n   color: 0xff88cc,\n })\n \n"
                },
                {
                    "date": 1671909634719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,18 +22,18 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 5000\n+const count = 50000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n-  // transparent: true,\n+  transparent: true,\n   alphaMap: particleTexture,\n   color: 0xff88cc,\n })\n \n"
                },
                {
                    "date": 1671909659387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 50000\n+const count = 5000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671909738095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n   color: 0xff88cc,\n+  alphaTest: 0.001,\n })\n \n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671909850370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n   color: 0xff88cc,\n-  alphaTest: 0.001,\n+  // alphaTest: 0.001,\n+  depthTest: false,\n })\n \n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671910020053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n   depthTest: false,\n })\n-\n+scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n scene.add(particles)\n \n"
                },
                {
                    "date": 1671910061007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,10 @@\n   transparent: true,\n   alphaMap: particleTexture,\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n-  depthTest: false,\n+  // depthTest: false,\n+  depthWrite: false,\n })\n scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671910226492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\n import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\n import * as dat from 'dat.gui'\n+import { AdditiveBlending } from 'three'\n \n const select = (e) => document.querySelector(e)\n \n // Settings\n@@ -37,8 +38,9 @@\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n+  blending: AdditiveBlending,\n })\n scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671910239511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n-  blending: AdditiveBlending,\n+  // blending: AdditiveBlending,\n })\n scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671910247221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n // MESH\n \n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n-const count = 5000\n+const count = 50000\n const position = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n"
                },
                {
                    "date": 1671910267924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n-  // blending: AdditiveBlending,\n+  blending: AdditiveBlending,\n })\n scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671910318438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n-  blending: AdditiveBlending,\n+  // blending: AdditiveBlending,\n })\n scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671911134326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,13 @@\n // Particles\n const particlesGeometry = new THREE.BufferGeometry()\n const count = 50000\n const position = new Float32Array(count * 3)\n+const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n+  const colord = Math.random() * 9.9\n+  color[i] = colord.toString(16)\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n@@ -38,11 +41,11 @@\n   color: 0xff88cc,\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n-  // blending: AdditiveBlending,\n+  blending: AdditiveBlending,\n })\n-scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n+// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n scene.add(particles)\n \n"
                },
                {
                    "date": 1671911417738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n-  color: 0xff88cc,\n+  color: [colors, 3],\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n   blending: AdditiveBlending,\n"
                },
                {
                    "date": 1671911434913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n-  color: [colors, 3],\n+  color: [color, 3],\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n   blending: AdditiveBlending,\n"
                },
                {
                    "date": 1671911463795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 9.9\n   color[i] = colord.toString(16)\n+  console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n"
                },
                {
                    "date": 1671913018413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 9.9\n-  color[i] = colord.toString(16)\n+  color[i] = Math.random()\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913060491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 9.9\n-  color[i] = Math.random()\n+  color[i] = colord.toString(16)\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913097827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 9.9\n-  color[i] = colord.toString(16)\n+  color[i] = colord\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913200937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n-  const colord = Math.random() * 9.9\n-  color[i] = colord\n+  const colord = Math.random() * 10\n+  color[i] = colord.toString(16)\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913340070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 10\n-  color[i] = colord.toString(16)\n+  color[i] = colord.toFixed().toString(16)\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913372954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n-  const colord = Math.random() * 10\n+  const colord = Math.random() * 16\n   color[i] = colord.toFixed().toString(16)\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671913509753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 16\n-  color[i] = colord.toFixed().toString(16)\n+  color[i] = colord.toString(16).toFixed()\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913548425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,10 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   const colord = Math.random() * 16\n-  color[i] = colord.toString(16).toFixed()\n+  colord = colord.toFixed()\n+  color[i] = colord.toString(16)\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913559799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n-  const colord = Math.random() * 16\n+  let colord = Math.random() * 16\n   colord = colord.toFixed()\n   color[i] = colord.toString(16)\n   console.log(color[i])\n }\n"
                },
                {
                    "date": 1671913664546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,9 @@\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n-  let colord = Math.random() * 16\n-  colord = colord.toFixed()\n-  color[i] = colord.toString(16)\n+  color[i] = Math.random()\n   console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671913672900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n-  console.log(color[i])\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n"
                },
                {
                    "date": 1671913943085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,14 +31,15 @@\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+particlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const particlesMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n-  color: [color, 3],\n+  // color: [color, 3],\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n   blending: AdditiveBlending,\n"
                },
                {
                    "date": 1671913990069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n   blending: AdditiveBlending,\n+  vertexColors: true,\n })\n // scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n"
                },
                {
                    "date": 1671915608807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,12 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n+const clock - new THREE.Clock()\n // Updated\n const tick = () => {\n+\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671915620310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,11 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n-const clock - new THREE.Clock()\n+const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671915651821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n+  const elapsedTime = clock.elapsedTime()\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671915687710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,11 @@\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n   const elapsedTime = clock.elapsedTime()\n+  // update particles\n+  particles.position.y = -elapsedTime * 0.02\n+\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671915805699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.elapsedTime()\n+  const elapsedTime = clock.elapsedTime\n   // update particles\n   particles.position.y = -elapsedTime * 0.02\n \n   controls.update()\n"
                },
                {
                    "date": 1671915842134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.elapsedTime\n+  const elapsedTime = clock.getElapsedTime()\n   // update particles\n   particles.position.y = -elapsedTime * 0.02\n \n   controls.update()\n"
                },
                {
                    "date": 1671916368986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n const particlesGeometry = new THREE.BufferGeometry()\n const count = 50000\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n-for (var i = 0; i < count; i++) {\n+for (var i = 0; i < count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671916690103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,12 @@\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n   // update particles\n   particles.position.y = -elapsedTime * 0.02\n+  for (var i = 0; i < count; i++) {\n+    const i3 = i * 3\n+    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime)\n+  }\n \n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n"
                },
                {
                    "date": 1671916713869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n // Updated\n const tick = () => {\n   const elapsedTime = clock.getElapsedTime()\n   // update particles\n-  particles.position.y = -elapsedTime * 0.02\n+  // particles.position.y = -elapsedTime * 0.02\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime)\n   }\n"
                },
                {
                    "date": 1671916765151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime)\n   }\n-\n+  particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671916955712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,10 @@\n   // update particles\n   // particles.position.y = -elapsedTime * 0.02\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n-    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime)\n+    const x = particlesGeometry.attributes.position.array[i3]\n+    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n   }\n   particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n   requestAnimationFrame(tick)\n"
                },
                {
                    "date": 1671917416805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   // update particles\n   // particles.position.y = -elapsedTime * 0.02\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n-    const x = particlesGeometry.attributes.position.array[i3]\n+    const x = particlesGeometry.attributes.position.array[i3 + 2]\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n   }\n   particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n"
                },
                {
                    "date": 1671917470575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   // update particles\n   // particles.position.y = -elapsedTime * 0.02\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n-    const x = particlesGeometry.attributes.position.array[i3 + 2]\n+    const x = particlesGeometry.attributes.position.array[i3 + 0]\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n   }\n   particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n"
                },
                {
                    "date": 1671917486175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   // update particles\n   // particles.position.y = -elapsedTime * 0.02\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n-    const x = particlesGeometry.attributes.position.array[i3 + 0]\n+    const x = particlesGeometry.attributes.position.array[i3 + 1]\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n   }\n   particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n"
                },
                {
                    "date": 1671917529201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   // update particles\n   // particles.position.y = -elapsedTime * 0.02\n   for (var i = 0; i < count; i++) {\n     const i3 = i * 3\n-    const x = particlesGeometry.attributes.position.array[i3 + 1]\n+    const x = particlesGeometry.attributes.position.array[i3 + 2]\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n   }\n   particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n"
                },
                {
                    "date": 1671917540696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n     const i3 = i * 3\n     const x = particlesGeometry.attributes.position.array[i3 + 2]\n     particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n   }\n-  particlesGeometry.attributes.position.needsUpdate = true\n+  // particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671919521290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,39 +17,13 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('particles/2.png')\n \n // MESH\n \n // Particles\n-const particlesGeometry = new THREE.BufferGeometry()\n-const count = 50000\n-const position = new Float32Array(count * 3)\n-const color = new Float32Array(count * 3)\n-for (var i = 0; i < count * 3; i++) {\n-  position[i] = (Math.random() - 0.5) * 5\n-  color[i] = Math.random()\n-}\n-particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-particlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n-const particlesMaterial = new THREE.PointsMaterial({\n-  size: 0.1,\n-  sizeAttenuation: true,\n-  transparent: true,\n-  alphaMap: particleTexture,\n-  // color: [color, 3],\n-  // alphaTest: 0.001,\n-  // depthTest: false,\n-  depthWrite: false,\n-  blending: AdditiveBlending,\n-  vertexColors: true,\n-})\n-// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Points\n-const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n-scene.add(particles)\n \n // Light\n \n // Camera\n@@ -68,20 +42,10 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n-const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime()\n-  // update particles\n-  // particles.position.y = -elapsedTime * 0.02\n-  for (var i = 0; i < count; i++) {\n-    const i3 = i * 3\n-    const x = particlesGeometry.attributes.position.array[i3 + 2]\n-    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n-  }\n-  // particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671919704696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n \n // MESH\n-\n-// Particles\n-// Points\n-\n+const generateGalaxy = () => {\n+  console.log('qwe')\n+}\n+generateGalaxy()\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671919741047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,11 @@\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n \n // MESH\n+const params = {\n+  count: 1000,\n+}\n const generateGalaxy = () => {\n   console.log('qwe')\n }\n generateGalaxy()\n"
                },
                {
                    "date": 1671922040635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,13 @@\n // MESH\n const params = {\n   count: 1000,\n }\n+const galaxyGeometry = new THREE.BufferGeometry()\n+const position = new Float32Array(count * 3)\n+for (var i = 0; i < position; i++) {\n+  position[i] = (Math.random() - 0.5) * 5\n+}\n const generateGalaxy = () => {\n   console.log('qwe')\n }\n generateGalaxy()\n"
                },
                {
                    "date": 1671922087106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,15 @@\n // MESH\n const params = {\n   count: 1000,\n }\n-const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(count * 3)\n-for (var i = 0; i < position; i++) {\n-  position[i] = (Math.random() - 0.5) * 5\n-}\n+\n const generateGalaxy = () => {\n+  const galaxyGeometry = new THREE.BufferGeometry()\n+  const position = new Float32Array(count * 3)\n+  for (var i = 0; i < position; i++) {\n+    position[i] = (Math.random() - 0.5) * 5\n+  }\n   console.log('qwe')\n }\n generateGalaxy()\n // Light\n"
                },
                {
                    "date": 1671922116139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   const position = new Float32Array(count * 3)\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n-  console.log('qwe')\n+  return galaxyGeometry\n }\n generateGalaxy()\n // Light\n \n"
                },
                {
                    "date": 1671922240195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n   count: 1000,\n }\n \n const generateGalaxy = () => {\n-  const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(count * 3)\n+  const galaxyGeometry = new THREE.BufferGeometry(position, 3)\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   return galaxyGeometry\n"
                },
                {
                    "date": 1671922277065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   count: 1000,\n }\n \n const generateGalaxy = () => {\n-  const position = new Float32Array(count * 3)\n+  const position = new Float32Array(params.count * 3)\n   const galaxyGeometry = new THREE.BufferGeometry(position, 3)\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n"
                },
                {
                    "date": 1671922496672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-\n+const particleTexture = textureLoader('particles/3.png')\n // MESH\n const params = {\n   count: 1000,\n }\n"
                },
                {
                    "date": 1671922526412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader('particles/3.png')\n+const particleTexture = textureLoader.load('particles/3.png')\n // MESH\n const params = {\n   count: 1000,\n }\n"
                },
                {
                    "date": 1671922649978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,13 +24,15 @@\n   count: 1000,\n }\n \n const generateGalaxy = () => {\n+  const galaxyParticles = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   const galaxyGeometry = new THREE.BufferGeometry(position, 3)\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n+  galaxyParticles.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   return galaxyGeometry\n }\n generateGalaxy()\n // Light\n"
                },
                {
                    "date": 1671922777829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,12 @@\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyParticles.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+  const galaxyMaterial = new THREE.PointsMaterial({\n+    alphaMap: particleTexture,\n+    size: 0.01,\n+  })\n   return galaxyGeometry\n }\n generateGalaxy()\n // Light\n"
                },
                {
                    "date": 1671923115294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,22 @@\n   count: 1000,\n }\n \n const generateGalaxy = () => {\n-  const galaxyParticles = new THREE.BufferGeometry()\n+  const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n-  const galaxyGeometry = new THREE.BufferGeometry(position, 3)\n+  galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyParticles.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   const galaxyMaterial = new THREE.PointsMaterial({\n     alphaMap: particleTexture,\n     size: 0.01,\n+    sizeAttenuation: true,\n+    transparent: true,\n   })\n+  const galaxy = new THREE.Points(galaxyParticles, galaxyMaterial)\n   return galaxyGeometry\n }\n generateGalaxy()\n // Light\n"
                },
                {
                    "date": 1671923131318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n-  galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n+  // galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyParticles.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671923151747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   // galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n   for (var i = 0; i < position; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n-  galaxyParticles.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+  galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   const galaxyMaterial = new THREE.PointsMaterial({\n     alphaMap: particleTexture,\n     size: 0.01,\n     sizeAttenuation: true,\n"
                },
                {
                    "date": 1671923191422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     size: 0.01,\n     sizeAttenuation: true,\n     transparent: true,\n   })\n-  const galaxy = new THREE.Points(galaxyParticles, galaxyMaterial)\n+  const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   return galaxyGeometry\n }\n generateGalaxy()\n // Light\n"
                },
                {
                    "date": 1671923279257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,10 @@\n   })\n   const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   return galaxyGeometry\n }\n-generateGalaxy()\n+const g1 = generateGalaxy()\n+scene.add(g1)\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671923381642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,12 +38,14 @@\n     sizeAttenuation: true,\n     transparent: true,\n   })\n   const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n-  return galaxyGeometry\n+  // return galaxyGeometry\n+  scene.add(galaxy)\n }\n-const g1 = generateGalaxy()\n-scene.add(g1)\n+generateGalaxy()\n+// const g1 = generateGalaxy()\n+// scene.add(g1)\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671923464424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,26 +23,25 @@\n const params = {\n   count: 1000,\n }\n \n-const generateGalaxy = () => {\n-  const galaxyGeometry = new THREE.BufferGeometry()\n-  const position = new Float32Array(params.count * 3)\n-  // galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n-  for (var i = 0; i < position; i++) {\n-    position[i] = (Math.random() - 0.5) * 5\n-  }\n-  galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-  const galaxyMaterial = new THREE.PointsMaterial({\n-    alphaMap: particleTexture,\n-    size: 0.01,\n-    sizeAttenuation: true,\n-    transparent: true,\n-  })\n-  const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n-  // return galaxyGeometry\n-  scene.add(galaxy)\n+const galaxyGeometry = new THREE.BufferGeometry()\n+const position = new Float32Array(params.count * 3)\n+// galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n+for (var i = 0; i < position; i++) {\n+  position[i] = (Math.random() - 0.5) * 5\n }\n+galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+const galaxyMaterial = new THREE.PointsMaterial({\n+  alphaMap: particleTexture,\n+  size: 0.01,\n+  sizeAttenuation: true,\n+  transparent: true,\n+})\n+const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n+// return galaxyGeometry\n+scene.add(galaxy)\n+const generateGalaxy = () => {}\n generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671923549991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n   position[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n+  size: 0.01,\n   alphaMap: particleTexture,\n-  size: 0.01,\n   sizeAttenuation: true,\n   transparent: true,\n })\n const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n"
                },
                {
                    "date": 1671923600856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,34 +17,40 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('particles/3.png')\n+const particleTexture = textureLoader.load('particles/2.png')\n+\n // MESH\n-const params = {\n-  count: 1000,\n-}\n \n-const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(params.count * 3)\n-// galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n-for (var i = 0; i < position; i++) {\n+// Particles\n+const particlesGeometry = new THREE.BufferGeometry()\n+const count = 50000\n+const position = new Float32Array(count * 3)\n+const color = new Float32Array(count * 3)\n+for (var i = 0; i < count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n+  color[i] = Math.random()\n }\n-galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-const galaxyMaterial = new THREE.PointsMaterial({\n-  size: 0.01,\n-  alphaMap: particleTexture,\n+particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+particlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n+const particlesMaterial = new THREE.PointsMaterial({\n+  size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n+  alphaMap: particleTexture,\n+  // color: [color, 3],\n+  // alphaTest: 0.001,\n+  // depthTest: false,\n+  depthWrite: false,\n+  blending: AdditiveBlending,\n+  vertexColors: true,\n })\n-const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n-// return galaxyGeometry\n-scene.add(galaxy)\n-const generateGalaxy = () => {}\n-generateGalaxy()\n-// const g1 = generateGalaxy()\n-// scene.add(g1)\n+// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n+// Points\n+const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n+scene.add(particles)\n+\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n@@ -62,10 +68,20 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n+const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n+  const elapsedTime = clock.getElapsedTime()\n+  // update particles\n+  // particles.position.y = -elapsedTime * 0.02\n+  for (var i = 0; i < count; i++) {\n+    const i3 = i * 3\n+    const x = particlesGeometry.attributes.position.array[i3]\n+    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n+  }\n+  particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671923614738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,40 +17,34 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('particles/2.png')\n-\n+const particleTexture = textureLoader.load('particles/3.png')\n // MESH\n+const params = {\n+  count: 1000,\n+}\n \n-// Particles\n-const particlesGeometry = new THREE.BufferGeometry()\n-const count = 50000\n-const position = new Float32Array(count * 3)\n-const color = new Float32Array(count * 3)\n-for (var i = 0; i < count * 3; i++) {\n+const galaxyGeometry = new THREE.BufferGeometry()\n+const position = new Float32Array(params.count * 3)\n+// galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n+for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n-  color[i] = Math.random()\n }\n-particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-particlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n-const particlesMaterial = new THREE.PointsMaterial({\n-  size: 0.1,\n+galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+const galaxyMaterial = new THREE.PointsMaterial({\n+  size: 0.01,\n+  alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n-  alphaMap: particleTexture,\n-  // color: [color, 3],\n-  // alphaTest: 0.001,\n-  // depthTest: false,\n-  depthWrite: false,\n-  blending: AdditiveBlending,\n-  vertexColors: true,\n })\n-// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n-// Points\n-const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n-scene.add(particles)\n-\n+const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n+// return galaxyGeometry\n+scene.add(galaxy)\n+const generateGalaxy = () => {}\n+generateGalaxy()\n+// const g1 = generateGalaxy()\n+// scene.add(g1)\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n@@ -68,20 +62,10 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n-const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime()\n-  // update particles\n-  // particles.position.y = -elapsedTime * 0.02\n-  for (var i = 0; i < count; i++) {\n-    const i3 = i * 3\n-    const x = particlesGeometry.attributes.position.array[i3]\n-    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n-  }\n-  particlesGeometry.attributes.position.needsUpdate = true\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                },
                {
                    "date": 1671923655853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('particles/3.png')\n+const particleTexture = textureLoader.load('sparticles/3.png')\n // MESH\n const params = {\n   count: 1000,\n }\n"
                },
                {
                    "date": 1671923664865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('sparticles/3.png')\n+const particleTexture = textureLoader.load('particles/2.png')\n // MESH\n const params = {\n   count: 1000,\n }\n"
                },
                {
                    "date": 1671923694941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n }\n \n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(params.count * 3)\n-// galaxyGeometry.setAttribute('position', new THREE.BufferGeometry(position, 3))\n for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671923814962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   count: 1000,\n }\n \n const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(params.count * 3)\n+const position = new Float32Array(3000)\n for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671923828707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n }\n \n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(3000)\n-for (var i = 0; i < position; i++) {\n+for (var i = 0; i < 3000; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671923881227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,15 @@\n   count: 1000,\n }\n \n const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(3000)\n-for (var i = 0; i < 3000; i++) {\n+const position = new Float32Array(params.count * 3)\n+for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n+  color: 0xffffff\n   size: 0.01,\n   alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n"
                },
                {
                    "date": 1671923975281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,16 @@\n }\n \n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(params.count * 3)\n+const color = new Float32Array(params.count * 3)\n for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n-  color: 0xffffff\n+  // color: 0xffffff,\n   size: 0.01,\n   alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n"
                },
                {
                    "date": 1671923983359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n const position = new Float32Array(params.count * 3)\n const color = new Float32Array(params.count * 3)\n for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n+  color[i] = (Math.random() - 0.5) * 5\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671924038683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n const position = new Float32Array(params.count * 3)\n const color = new Float32Array(params.count * 3)\n for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n-  color[i] = (Math.random() - 0.5) * 5\n+  color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1671924090487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n   size: 0.01,\n   alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n+  vertexColors: true,\n })\n const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n // return galaxyGeometry\n scene.add(galaxy)\n"
                },
                {
                    "date": 1671924217727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n-\n+scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n camera.position.z = 4\n camera.position.y = 1\n"
                },
                {
                    "date": 1671924302251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,26 +23,51 @@\n const params = {\n   count: 1000,\n }\n \n-const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(params.count * 3)\n-const color = new Float32Array(params.count * 3)\n-for (var i = 0; i < position; i++) {\n+const particlesGeometry = new THREE.BufferGeometry()\n+const count = 50000\n+const position = new Float32Array(count * 3)\n+const color = new Float32Array(count * 3)\n+for (var i = 0; i < count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n-galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n-const galaxyMaterial = new THREE.PointsMaterial({\n-  // color: 0xffffff,\n-  size: 0.01,\n-  alphaMap: particleTexture,\n+particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+particlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n+const particlesMaterial = new THREE.PointsMaterial({\n+  size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n+  alphaMap: particleTexture,\n+  // color: [color, 3],\n+  // alphaTest: 0.001,\n+  // depthTest: false,\n+  depthWrite: false,\n+  blending: AdditiveBlending,\n   vertexColors: true,\n })\n-const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n+// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n+// Points\n+const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n+scene.add(particles) // const galaxyGeometry = new THREE.BufferGeometry()\n+// const position = new Float32Array(params.count * 3)\n+// const color = new Float32Array(params.count * 3)\n+// for (var i = 0; i < position; i++) {\n+//   position[i] = (Math.random() - 0.5) * 5\n+//   color[i] = Math.random()\n+// }\n+// galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+// galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n+// const galaxyMaterial = new THREE.PointsMaterial({\n+//   // color: 0xffffff,\n+//   size: 0.01,\n+//   alphaMap: particleTexture,\n+//   sizeAttenuation: true,\n+//   transparent: true,\n+//   vertexColors: true,\n+// })\n+// const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n // return galaxyGeometry\n scene.add(galaxy)\n const generateGalaxy = () => {}\n generateGalaxy()\n"
                },
                {
                    "date": 1671924322198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n //   vertexColors: true,\n // })\n // const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n // return galaxyGeometry\n-scene.add(galaxy)\n+// scene.add(galaxy)\n const generateGalaxy = () => {}\n generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n"
                },
                {
                    "date": 1671924600561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,54 +22,28 @@\n // MESH\n const params = {\n   count: 1000,\n }\n-\n-const particlesGeometry = new THREE.BufferGeometry()\n-const count = 50000\n-const position = new Float32Array(count * 3)\n-const color = new Float32Array(count * 3)\n-for (var i = 0; i < count * 3; i++) {\n+const galaxyGeometry = new THREE.BufferGeometry()\n+const position = new Float32Array(params.count * 3)\n+const color = new Float32Array(params.count * 3)\n+for (var i = 0; i < position; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n-particlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-particlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n-const particlesMaterial = new THREE.PointsMaterial({\n-  size: 0.1,\n+galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n+const galaxyMaterial = new THREE.PointsMaterial({\n+  // color: 0xffffff,\n+  size: 0.01,\n+  alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n-  alphaMap: particleTexture,\n-  // color: [color, 3],\n-  // alphaTest: 0.001,\n-  // depthTest: false,\n-  depthWrite: false,\n-  blending: AdditiveBlending,\n   vertexColors: true,\n })\n-// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n-// Points\n-const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n-scene.add(particles) // const galaxyGeometry = new THREE.BufferGeometry()\n-// const position = new Float32Array(params.count * 3)\n-// const color = new Float32Array(params.count * 3)\n-// for (var i = 0; i < position; i++) {\n-//   position[i] = (Math.random() - 0.5) * 5\n-//   color[i] = Math.random()\n-// }\n-// galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-// galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n-// const galaxyMaterial = new THREE.PointsMaterial({\n-//   // color: 0xffffff,\n-//   size: 0.01,\n-//   alphaMap: particleTexture,\n-//   sizeAttenuation: true,\n-//   transparent: true,\n-//   vertexColors: true,\n-// })\n-// const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n-// return galaxyGeometry\n-// scene.add(galaxy)\n+const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n+scene.add(galaxy)\n+\n const generateGalaxy = () => {}\n generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n"
                },
                {
                    "date": 1671924614775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n   // color: 0xffffff,\n-  size: 0.01,\n+  size: 0.1,\n   alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n   vertexColors: true,\n"
                },
                {
                    "date": 1671924670118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,17 @@\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n-  // color: 0xffffff,\n   size: 0.1,\n-  alphaMap: particleTexture,\n   sizeAttenuation: true,\n   transparent: true,\n+  alphaMap: particleTexture,\n+  // color: [color, 3],\n+  // alphaTest: 0.001,\n+  // depthTest: false,\n+  depthWrite: false,\n+  blending: AdditiveBlending,\n   vertexColors: true,\n })\n const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n scene.add(galaxy)\n"
                },
                {
                    "date": 1671924959557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n   depthWrite: false,\n   blending: AdditiveBlending,\n   vertexColors: true,\n })\n-const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial)\n-scene.add(galaxy)\n+const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n+scene.add(particles)\n \n const generateGalaxy = () => {}\n generateGalaxy()\n // const g1 = generateGalaxy()\n"
                },
                {
                    "date": 1671924984928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n   depthWrite: false,\n   blending: AdditiveBlending,\n   vertexColors: true,\n })\n-const particles = new THREE.Points(particlesGeometry, particlesMaterial)\n+const particles = new THREE.Points(galaxyGeometry, galaxyMaterial)\n scene.add(particles)\n \n const generateGalaxy = () => {}\n generateGalaxy()\n"
                },
                {
                    "date": 1671925060212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n }\n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(params.count * 3)\n const color = new Float32Array(params.count * 3)\n-for (var i = 0; i < position; i++) {\n+for (var i = 0; i < count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671925112113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,14 +19,12 @@\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n const particleTexture = textureLoader.load('particles/2.png')\n // MESH\n-const params = {\n-  count: 1000,\n-}\n+const count = 1000\n const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(params.count * 3)\n-const color = new Float32Array(params.count * 3)\n+const position = new Float32Array(count * 3)\n+const color = new Float32Array(count * 3)\n for (var i = 0; i < count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n"
                },
                {
                    "date": 1671925143993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,11 @@\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n const particleTexture = textureLoader.load('particles/2.png')\n // MESH\n-const count = 1000\n+const params = {\n+  count: 1000,\n+}\n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count * 3; i++) {\n"
                },
                {
                    "date": 1671925192392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n // MESH\n const params = {\n   count: 1000,\n }\n+const count = params.count\n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(count * 3)\n const color = new Float32Array(count * 3)\n for (var i = 0; i < count * 3; i++) {\n"
                },
                {
                    "date": 1671925401105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,11 @@\n // MESH\n const params = {\n   count: 1000,\n }\n-const count = params.count\n const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(count * 3)\n-const color = new Float32Array(count * 3)\n+const position = new Float32Array(params.count * 3)\n+const color = new Float32Array(params.count * 3)\n for (var i = 0; i < count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n"
                },
                {
                    "date": 1671925420049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n }\n const galaxyGeometry = new THREE.BufferGeometry()\n const position = new Float32Array(params.count * 3)\n const color = new Float32Array(params.count * 3)\n-for (var i = 0; i < count * 3; i++) {\n+for (var i = 0; i < params.count * 3; i++) {\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671925448914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n   position[i] = (Math.random() - 0.5) * 5\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n"
                },
                {
                    "date": 1671925459891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n+  color: 0xffffff,\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n"
                },
                {
                    "date": 1671925524412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n-  color: 0xffffff,\n+  color: '0xffffff',\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n"
                },
                {
                    "date": 1671925546287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n-  color: '0xffffff',\n+  color: 'ffffff',\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n"
                },
                {
                    "date": 1671925563819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n-  color: 'ffffff',\n+  color: 'white',\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n"
                },
                {
                    "date": 1671925570229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n   color[i] = Math.random()\n }\n galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n const galaxyMaterial = new THREE.PointsMaterial({\n-  color: 'white',\n+  color: 0xffffff,\n   size: 0.1,\n   sizeAttenuation: true,\n   transparent: true,\n   alphaMap: particleTexture,\n"
                },
                {
                    "date": 1671925602784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   // alphaTest: 0.001,\n   // depthTest: false,\n   depthWrite: false,\n   blending: AdditiveBlending,\n-  vertexColors: true,\n+  // vertexColors: true,\n })\n const particles = new THREE.Points(galaxyGeometry, galaxyMaterial)\n scene.add(particles)\n \n"
                },
                {
                    "date": 1671925702674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,38 +22,39 @@\n // MESH\n const params = {\n   count: 1000,\n }\n-const galaxyGeometry = new THREE.BufferGeometry()\n-const position = new Float32Array(params.count * 3)\n-const color = new Float32Array(params.count * 3)\n-for (var i = 0; i < params.count * 3; i++) {\n-  position[i] = (Math.random() - 0.5) * 5\n-  color[i] = Math.random()\n-}\n-galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-const galaxyMaterial = new THREE.PointsMaterial({\n-  color: 0xffffff,\n-  size: 0.1,\n-  sizeAttenuation: true,\n-  transparent: true,\n-  alphaMap: particleTexture,\n-  // color: [color, 3],\n-  // alphaTest: 0.001,\n-  // depthTest: false,\n-  depthWrite: false,\n-  blending: AdditiveBlending,\n-  // vertexColors: true,\n-})\n-const particles = new THREE.Points(galaxyGeometry, galaxyMaterial)\n scene.add(particles)\n \n-const generateGalaxy = () => {}\n+const generateGalaxy = () => {\n+  const galaxyGeometry = new THREE.BufferGeometry()\n+  const position = new Float32Array(params.count * 3)\n+  const color = new Float32Array(params.count * 3)\n+  for (var i = 0; i < params.count * 3; i++) {\n+    position[i] = (Math.random() - 0.5) * 5\n+    color[i] = Math.random()\n+  }\n+  galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+  const galaxyMaterial = new THREE.PointsMaterial({\n+    color: 0xffffff,\n+    size: 0.1,\n+    sizeAttenuation: true,\n+    transparent: true,\n+    alphaMap: particleTexture,\n+    // color: [color, 3],\n+    // alphaTest: 0.001,\n+    // depthTest: false,\n+    depthWrite: false,\n+    blending: AdditiveBlending,\n+    // vertexColors: true,\n+  })\n+  return THREE.Points(galaxyGeometry, galaxyMaterial)\n+}\n generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n-scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n+\n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n camera.position.z = 4\n camera.position.y = 1\n"
                },
                {
                    "date": 1671925740458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n // MESH\n const params = {\n   count: 1000,\n }\n-scene.add(particles)\n \n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n"
                },
                {
                    "date": 1671925758293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     depthWrite: false,\n     blending: AdditiveBlending,\n     // vertexColors: true,\n   })\n-  return THREE.Points(galaxyGeometry, galaxyMaterial)\n+  return new THREE.Points(galaxyGeometry, galaxyMaterial)\n }\n generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n"
                },
                {
                    "date": 1671925776496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,10 @@\n     // vertexColors: true,\n   })\n   return new THREE.Points(galaxyGeometry, galaxyMaterial)\n }\n-generateGalaxy()\n-// const g1 = generateGalaxy()\n-// scene.add(g1)\n+const g1 = generateGalaxy()\n+scene.add(g1)\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671925993208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n const particleTexture = textureLoader.load('particles/2.png')\n // MESH\n const params = {\n   count: 1000,\n+  size: 0.1,\n }\n \n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n"
                },
                {
                    "date": 1671926019912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   const galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n-    size: 0.1,\n+    size: params.size,\n     sizeAttenuation: true,\n     transparent: true,\n     alphaMap: particleTexture,\n     // color: [color, 3],\n"
                },
                {
                    "date": 1671926552510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n const params = {\n   count: 1000,\n   size: 0.1,\n }\n-\n+gui.add(params, 'count').min(100).max(10000000).step(100)\n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   const color = new Float32Array(params.count * 3)\n"
                },
                {
                    "date": 1671926603155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,10 @@\n const params = {\n   count: 1000,\n   size: 0.1,\n }\n+\n+const gui = new dat.GUI()\n gui.add(params, 'count').min(100).max(10000000).step(100)\n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n@@ -64,9 +66,8 @@\n const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas })\n renderer.setSize(sizes.width, sizes.height)\n renderer.setPixelRatio(devicePixelRatio)\n // Controls\n-const gui = new dat.GUI()\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n"
                },
                {
                    "date": 1671926632715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n const params = {\n   count: 1000,\n   size: 0.1,\n }\n-\n const gui = new dat.GUI()\n gui.add(params, 'count').min(100).max(10000000).step(100)\n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n"
                },
                {
                    "date": 1671926710749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n   size: 0.1,\n }\n const gui = new dat.GUI()\n gui.add(params, 'count').min(100).max(10000000).step(100)\n+gui.add(params, 'size').min(0.001).max(1).step(0.001)\n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   const color = new Float32Array(params.count * 3)\n"
                },
                {
                    "date": 1671926726140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas })\n renderer.setSize(sizes.width, sizes.height)\n renderer.setPixelRatio(devicePixelRatio)\n // Controls\n-gui.hide()\n+// gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n // Updated\n"
                },
                {
                    "date": 1671926765522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n const params = {\n   count: 1000,\n   size: 0.1,\n }\n-const gui = new dat.GUI()\n+const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n gui.add(params, 'size').min(0.001).max(1).step(0.001)\n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n"
                },
                {
                    "date": 1671926814007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     color: 0xffffff,\n     size: params.size,\n     sizeAttenuation: true,\n     transparent: true,\n-    alphaMap: particleTexture,\n+    // alphaMap: particleTexture,\n     // color: [color, 3],\n     // alphaTest: 0.001,\n     // depthTest: false,\n     depthWrite: false,\n"
                },
                {
                    "date": 1671926830937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     color: 0xffffff,\n     size: params.size,\n     sizeAttenuation: true,\n     transparent: true,\n-    // alphaMap: particleTexture,\n+    alphaMap: particleTexture,\n     // color: [color, 3],\n     // alphaTest: 0.001,\n     // depthTest: false,\n     depthWrite: false,\n"
                },
                {
                    "date": 1671926967727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n gui.add(params, 'size').min(0.001).max(1).step(0.001)\n const generateGalaxy = () => {\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n-  const color = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n     color[i] = Math.random()\n   }\n"
                },
                {
                    "date": 1671926981476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n   const galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n-    color[i] = Math.random()\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   const galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1671927013590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,11 +26,11 @@\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n gui.add(params, 'size').min(0.001).max(1).step(0.001)\n+let galaxyGeometry = new THREE.BufferGeometry()\n+let position = new Float32Array(params.count * 3)\n const generateGalaxy = () => {\n-  const galaxyGeometry = new THREE.BufferGeometry()\n-  const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671927022450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,12 @@\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n gui.add(params, 'size').min(0.001).max(1).step(0.001)\n+\n let galaxyGeometry = new THREE.BufferGeometry()\n let position = new Float32Array(params.count * 3)\n+\n const generateGalaxy = () => {\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n"
                },
                {
                    "date": 1671927359883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,11 @@\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n gui.add(params, 'size').min(0.001).max(1).step(0.001)\n-\n-let galaxyGeometry = new THREE.BufferGeometry()\n-let position = new Float32Array(params.count * 3)\n-\n const generateGalaxy = () => {\n+  const galaxyGeometry = new THREE.BufferGeometry()\n+  const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1671927689700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,13 @@\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n gui.add(params, 'size').min(0.001).max(1).step(0.001)\n+let galaxyGeometry = null\n+let galaxyPoints = null\n+let galaxyMaterial = null\n const generateGalaxy = () => {\n-  const galaxyGeometry = new THREE.BufferGeometry()\n+  galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n@@ -46,9 +49,9 @@\n     depthWrite: false,\n     blending: AdditiveBlending,\n     // vertexColors: true,\n   })\n-  return new THREE.Points(galaxyGeometry, galaxyMaterial)\n+  galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n }\n const g1 = generateGalaxy()\n scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671927703119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n     // vertexColors: true,\n   })\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n }\n-const g1 = generateGalaxy()\n-scene.add(g1)\n+// const g1 = generateGalaxy()\n+// scene.add(g1)\n // Light\n \n // Camera\n const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\n"
                },
                {
                    "date": 1671927920792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,18 @@\n let galaxyGeometry = null\n let galaxyPoints = null\n let galaxyMaterial = null\n const generateGalaxy = () => {\n+  if (galaxyPoints !== null) {\n+    galaxyGeometry.dispose()\n+  }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-  const galaxyMaterial = new THREE.PointsMaterial({\n+  galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n     size: params.size,\n     sizeAttenuation: true,\n     transparent: true,\n"
                },
                {
                    "date": 1671927945672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,10 @@\n let galaxyMaterial = null\n const generateGalaxy = () => {\n   if (galaxyPoints !== null) {\n     galaxyGeometry.dispose()\n+    galaxyMaterial.dispose()\n+    galaxyPoints.dispose()\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n"
                },
                {
                    "date": 1671928011847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n const generateGalaxy = () => {\n   if (galaxyPoints !== null) {\n     galaxyGeometry.dispose()\n     galaxyMaterial.dispose()\n-    galaxyPoints.dispose()\n+    scene.remove(galaxyPoints)\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n"
                },
                {
                    "date": 1671928179754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n     blending: AdditiveBlending,\n     // vertexColors: true,\n   })\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n+  scene.add(galaxyPoints)\n }\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671928203864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n   })\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n+generateGalaxy\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1671928234366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   size: 0.1,\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001)\n+gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy())\n let galaxyGeometry = null\n let galaxyPoints = null\n let galaxyMaterial = null\n const generateGalaxy = () => {\n@@ -57,9 +57,9 @@\n   })\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n-generateGalaxy\n+generateGalaxy()\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1671928251047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   size: 0.1,\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy())\n+gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n let galaxyGeometry = null\n let galaxyPoints = null\n let galaxyMaterial = null\n const generateGalaxy = () => {\n"
                },
                {
                    "date": 1671928260981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   size: 0.1,\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n+gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy()\n let galaxyGeometry = null\n let galaxyPoints = null\n let galaxyMaterial = null\n const generateGalaxy = () => {\n"
                },
                {
                    "date": 1671928266406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   size: 0.1,\n }\n const gui = new dat.GUI({ width: 400 })\n gui.add(params, 'count').min(100).max(10000000).step(100)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy()\n+gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy())\n let galaxyGeometry = null\n let galaxyPoints = null\n let galaxyMaterial = null\n const generateGalaxy = () => {\n"
                },
                {
                    "date": 1671928286656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,8 @@\n   count: 1000,\n   size: 0.1,\n }\n const gui = new dat.GUI({ width: 400 })\n-gui.add(params, 'count').min(100).max(10000000).step(100)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy())\n let galaxyGeometry = null\n let galaxyPoints = null\n let galaxyMaterial = null\n const generateGalaxy = () => {\n@@ -58,8 +56,10 @@\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n generateGalaxy()\n+gui.add(params, 'count').min(100).max(10000000).step(100)\n+gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy())\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1671928312802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n   scene.add(galaxyPoints)\n }\n generateGalaxy()\n gui.add(params, 'count').min(100).max(10000000).step(100)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy())\n+gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1671928352084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n generateGalaxy()\n-gui.add(params, 'count').min(100).max(10000000).step(100)\n+gui.add(params, 'count').min(100).max(10000000).step(100).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671928389083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n generateGalaxy()\n-gui.add(params, 'count').min(100).max(10000000).step(100).onFinishChange(generateGalaxy)\n+gui.add(params, 'count').min(10).max(10000000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671928403533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n generateGalaxy()\n-gui.add(params, 'count').min(10).max(10000000).step(10).onFinishChange(generateGalaxy)\n+gui.add(params, 'count').min(10).max(10000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671928414780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n generateGalaxy()\n-gui.add(params, 'count').min(10).max(10000).step(10).onFinishChange(generateGalaxy)\n+gui.add(params, 'count').min(10).max(100000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1671936382093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n // MESH\n const params = {\n   count: 1000,\n   size: 0.1,\n+  radius: 5,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n@@ -36,8 +37,9 @@\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   for (var i = 0; i < params.count * 3; i++) {\n+    const ii = i * 3\n     position[i] = (Math.random() - 0.5) * 5\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n@@ -58,8 +60,9 @@\n }\n generateGalaxy()\n gui.add(params, 'count').min(10).max(100000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n+gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1671936560424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,14 @@\n     scene.remove(galaxyPoints)\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n-  for (var i = 0; i < params.count * 3; i++) {\n-    const ii = i * 3\n-    position[i] = (Math.random() - 0.5) * 5\n+  for (let i = 0; i < params.count * 3; i++) {\n+    const i3 = i * 3\n+    const radius = Math.random() * params.radius\n+    position[i3 + 0] = (Math.random() - 0.5) * 3\n+    position[i3 + 0] = 0\n+    position[i3 + 0] = 0\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1671936641622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     position[i3 + 0] = (Math.random() - 0.5) * 3\n-    position[i3 + 0] = 0\n-    position[i3 + 0] = 0\n+    position[i3 + 1] = 0\n+    position[i3 + 2] = 0\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1671996140379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import './style.styl'\n \n import * as THREE from 'three'\n+\n import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\n import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\n import * as dat from 'dat.gui'\n"
                },
                {
                    "date": 1672017233405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   const position = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n-    position[i3 + 0] = (Math.random() - 0.5) * 3\n+    position[i3 + 0] = radius\n     position[i3 + 1] = 0\n     position[i3 + 2] = 0\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1672017394159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n const params = {\n   count: 1000,\n   size: 0.1,\n   radius: 5,\n+  branches: 2,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n@@ -65,8 +66,9 @@\n generateGalaxy()\n gui.add(params, 'count').min(10).max(100000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n+gui.add(params, 'branches').min(2).max(20).step(20).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1672017416724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n generateGalaxy()\n gui.add(params, 'count').min(10).max(100000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n-gui.add(params, 'branches').min(2).max(20).step(20).onFinishChange(generateGalaxy)\n+gui.add(params, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1672020079107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,12 @@\n   const position = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n+    const branchesAngle = i % branches\n+    if (i < 20) {\n+      console.log(i, branchesAngle)\n+    }\n     position[i3 + 0] = radius\n     position[i3 + 1] = 0\n     position[i3 + 2] = 0\n   }\n"
                },
                {
                    "date": 1672020108854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   const position = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n-    const branchesAngle = i % branches\n+    const branchesAngle = i % params.branches\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     position[i3 + 0] = radius\n"
                },
                {
                    "date": 1672020741156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   const position = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n-    const branchesAngle = i % params.branches\n+    const branchesAngle = (i % params.branches) / params.branches\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     position[i3 + 0] = radius\n"
                },
                {
                    "date": 1672020850906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   const position = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n-    const branchesAngle = (i % params.branches) / params.branches\n+    const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     position[i3 + 0] = radius\n"
                },
                {
                    "date": 1672021110734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,11 +45,11 @@\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    position[i3 + 0] = radius\n+    position[i3 + 0] = Math.cos(branchesAngle)\n     position[i3 + 1] = 0\n-    position[i3 + 2] = 0\n+    position[i3 + 2] = Math.sin(branchesAngle)\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1672021157041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,11 +45,11 @@\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    position[i3 + 0] = Math.cos(branchesAngle)\n+    position[i3 + 0] = Math.cos(branchesAngle) * radius\n     position[i3 + 1] = 0\n-    position[i3 + 2] = Math.sin(branchesAngle)\n+    position[i3 + 2] = Math.sin(branchesAngle) * radius\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1672021325529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n   count: 1000,\n   size: 0.1,\n   radius: 5,\n   branches: 2,\n+  spin: 1,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n@@ -71,8 +72,9 @@\n gui.add(params, 'count').min(10).max(100000).step(10).onFinishChange(generateGalaxy)\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n+gui.add(params, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy)\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1672021337440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n const params = {\n   count: 1000,\n   size: 0.1,\n   radius: 5,\n-  branches: 2,\n+  branches: 3,\n   spin: 1,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n"
                },
                {
                    "date": 1672021525381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,15 +42,16 @@\n   const position = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n+    const spinAgnle = radius * params.spin\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    position[i3 + 0] = Math.cos(branchesAngle) * radius\n+    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius\n     position[i3 + 1] = 0\n-    position[i3 + 2] = Math.sin(branchesAngle) * radius\n+    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1672021729773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   size: 0.1,\n   radius: 5,\n   branches: 3,\n   spin: 1,\n+  randomness: 2,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n@@ -74,8 +75,10 @@\n gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n gui.add(params, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy)\n+gui.add(params, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy)\n+\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                },
                {
                    "date": 1672022429130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n   radius: 5,\n   branches: 3,\n   spin: 1,\n   randomness: 2,\n+  randomnessPow: 2,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n@@ -48,11 +49,14 @@\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius\n-    position[i3 + 1] = 0\n-    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius\n+    const randomX = (Math.random() - 0.5) * params.randomness\n+    const randomY = (Math.random() - 0.5) * params.randomness\n+    const randomZ = (Math.random() - 0.5) * params.randomness\n+    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n+    position[i3 + 1] = randomY\n+    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n@@ -76,8 +80,9 @@\n gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n gui.add(params, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy)\n+gui.add(params, 'randomnessPow').min(1).max(10).step(0.001).onFinishChange(generateGalaxy)\n \n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1672022591722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,11 @@\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    const randomX = (Math.random() - 0.5) * params.randomness\n-    const randomY = (Math.random() - 0.5) * params.randomness\n-    const randomZ = (Math.random() - 0.5) * params.randomness\n+    const randomX = Math.pow((Math.random() - 0.5) * params.randomness, randomnessPow)\n+    const randomY = Math.pow((Math.random() - 0.5) * params.randomness, randomnessPow)\n+    const randomZ = Math.pow((Math.random() - 0.5) * params.randomness, randomnessPow)\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n"
                },
                {
                    "date": 1672022605056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,11 @@\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    const randomX = Math.pow((Math.random() - 0.5) * params.randomness, randomnessPow)\n-    const randomY = Math.pow((Math.random() - 0.5) * params.randomness, randomnessPow)\n-    const randomZ = Math.pow((Math.random() - 0.5) * params.randomness, randomnessPow)\n+    const randomX = Math.pow((Math.random() - 0.5) * params.randomness, params.randomnessPow)\n+    const randomY = Math.pow((Math.random() - 0.5) * params.randomness, params.randomnessPow)\n+    const randomZ = Math.pow((Math.random() - 0.5) * params.randomness, params.randomnessPow)\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n"
                },
                {
                    "date": 1672022977887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,11 +49,15 @@\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n-    const randomX = Math.pow((Math.random() - 0.5) * params.randomness, params.randomnessPow)\n-    const randomY = Math.pow((Math.random() - 0.5) * params.randomness, params.randomnessPow)\n-    const randomZ = Math.pow((Math.random() - 0.5) * params.randomness, params.randomnessPow)\n+    function ranPow(math) {\n+      return Math.pow((math - 0.5) * params.randomness, params.randomnessPow)\n+    }\n+    j\n+    const randomX = ranPow(Math.random())\n+    const randomY = ranPow(Math.random())\n+    const randomZ = ranPow(Math.random())\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n"
                },
                {
                    "date": 1672023068090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     function ranPow(math) {\n-      return Math.pow((math - 0.5) * params.randomness, params.randomnessPow)\n+      return Math.pow(math * params.randomness, params.randomnessPow)\n     }\n     j\n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n"
                },
                {
                    "date": 1672023102724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     function ranPow(math) {\n-      return Math.pow(math * params.randomness, params.randomnessPow)\n+      return Math.pow(math, params.randomnessPow)\n     }\n     j\n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n"
                },
                {
                    "date": 1672023111525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     }\n     function ranPow(math) {\n       return Math.pow(math, params.randomnessPow)\n     }\n-    j\n+\n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n     const randomZ = ranPow(Math.random())\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n"
                },
                {
                    "date": 1672023262641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,13 +52,13 @@\n     }\n     function ranPow(math) {\n       return Math.pow(math, params.randomnessPow)\n     }\n-\n+    \n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n     const randomZ = ranPow(Math.random())\n-    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n+    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + ) * radius\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1672023270256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,13 +52,13 @@\n     }\n     function ranPow(math) {\n       return Math.pow(math, params.randomnessPow)\n     }\n-    \n+\n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n     const randomZ = ranPow(Math.random())\n-    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + ) * radius\n+    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1672023285765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n     const randomZ = ranPow(Math.random())\n-    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle + randomX) * radius\n+    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius + randomX\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n"
                },
                {
                    "date": 1672025236628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     const randomY = ranPow(Math.random())\n     const randomZ = ranPow(Math.random())\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius + randomX\n     position[i3 + 1] = randomY\n-    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle + randomZ) * radius\n+    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomX\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1672025252692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n const particleTexture = textureLoader.load('particles/2.png')\n // MESH\n const params = {\n-  count: 1000,\n+  count: 10000,\n   size: 0.1,\n   radius: 5,\n   branches: 3,\n   spin: 1,\n"
                },
                {
                    "date": 1672025315333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     const randomY = ranPow(Math.random())\n     const randomZ = ranPow(Math.random())\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius + randomX\n     position[i3 + 1] = randomY\n-    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomX\n+    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomZ\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n"
                },
                {
                    "date": 1672025480965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     function ranPow(math) {\n-      return Math.pow(math, params.randomnessPow)\n+      return Math.pow(math, params.randomnessPow) * math > 0.5 ? 1 : -1\n     }\n \n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n"
                },
                {
                    "date": 1672025782121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     function ranPow(math) {\n-      return Math.pow(math, params.randomnessPow) * math > 0.5 ? 1 : -1\n+      return Math.pow(math, params.randomnessPow) * (math > 0.5 ? 1 : -1)\n     }\n \n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n"
                },
                {
                    "date": 1672026029951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     if (i < 20) {\n       console.log(i, branchesAngle)\n     }\n     function ranPow(math) {\n-      return Math.pow(math, params.randomnessPow) * (math > 0.5 ? 1 : -1)\n+      return Math.pow(math, params.randomnessPow) * (Math.random() > 0.5 ? 1 : -1)\n     }\n \n     const randomX = ranPow(Math.random())\n     const randomY = ranPow(Math.random())\n"
                },
                {
                    "date": 1672026629912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,10 @@\n   branches: 3,\n   spin: 1,\n   randomness: 2,\n   randomnessPow: 2,\n+  inColor: 0xff0000,\n+  outColor: 0x0000ff,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n"
                },
                {
                    "date": 1672026653695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n   branches: 3,\n   spin: 1,\n   randomness: 2,\n   randomnessPow: 2,\n-  inColor: 0xff0000,\n-  outColor: 0x0000ff,\n+  inColor: 0xff7777,\n+  outColor: 0x7777ff,\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n"
                },
                {
                    "date": 1672026752466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,9 @@\n gui.add(params, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n gui.add(params, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'randomnessPow').min(1).max(10).step(0.001).onFinishChange(generateGalaxy)\n+gui.addColor(params, 'inColor').onFinishChange(generateGalaxy)\n \n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1672026770026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n gui.add(params, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy)\n gui.add(params, 'randomnessPow').min(1).max(10).step(0.001).onFinishChange(generateGalaxy)\n gui.addColor(params, 'inColor').onFinishChange(generateGalaxy)\n+gui.addColor(params, 'outColor').onFinishChange(generateGalaxy)\n \n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n"
                },
                {
                    "date": 1672026856216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n     scene.remove(galaxyPoints)\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n+  const color = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     const spinAgnle = radius * params.spin\n@@ -74,9 +75,9 @@\n     // alphaTest: 0.001,\n     // depthTest: false,\n     depthWrite: false,\n     blending: AdditiveBlending,\n-    // vertexColors: true,\n+    vertexColors: true,\n   })\n   galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n   scene.add(galaxyPoints)\n }\n"
                },
                {
                    "date": 1672027063466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     scene.remove(galaxyPoints)\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n-  const color = new Float32Array(params.count * 3)\n+  const colors = new Float32Array(params.count * 3)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     const spinAgnle = radius * params.spin\n@@ -64,17 +64,15 @@\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomZ\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n+  galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n     color: 0xffffff,\n     size: params.size,\n     sizeAttenuation: true,\n     transparent: true,\n     alphaMap: particleTexture,\n-    // color: [color, 3],\n-    // alphaTest: 0.001,\n-    // depthTest: false,\n     depthWrite: false,\n     blending: AdditiveBlending,\n     vertexColors: true,\n   })\n"
                },
                {
                    "date": 1672027116984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,12 @@\n     const randomZ = ranPow(Math.random())\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius + randomX\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomZ\n+\n+    colors[i3] = 1\n+    colors[i3 + 1] = 0\n+    colors[i3 + 2] = 0\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1672027223179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   const colors = new Float32Array(params.count * 3)\n+  const colorIn = new THREE.Color(params.colorIn)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     const spinAgnle = radius * params.spin\n"
                },
                {
                    "date": 1672027272309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   const colors = new Float32Array(params.count * 3)\n   const colorIn = new THREE.Color(params.colorIn)\n+  const colorOut = new THREE.Color(params.colorOut)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     const spinAgnle = radius * params.spin\n"
                },
                {
                    "date": 1672027322561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,10 @@\n   const position = new Float32Array(params.count * 3)\n   const colors = new Float32Array(params.count * 3)\n   const colorIn = new THREE.Color(params.colorIn)\n   const colorOut = new THREE.Color(params.colorOut)\n+\n+  console.log(colorIn)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     const spinAgnle = radius * params.spin\n"
                },
                {
                    "date": 1672027788565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,11 +67,13 @@\n     position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius + randomX\n     position[i3 + 1] = randomY\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomZ\n \n-    colors[i3] = 1\n-    colors[i3 + 1] = 0\n-    colors[i3 + 2] = 0\n+    const mixColor = colorIn.clone()\n+    mixColor.lerp(colorOut, radius / params.radius)\n+    colors[i3] = mixColor.r\n+    colors[i3 + 1] = mixColor.b\n+    colors[i3 + 2] = mixColor.g\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1672027824879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,10 @@\n \n     const mixColor = colorIn.clone()\n     mixColor.lerp(colorOut, radius / params.radius)\n     colors[i3] = mixColor.r\n-    colors[i3 + 1] = mixColor.b\n-    colors[i3 + 2] = mixColor.g\n+    colors[i3 + 1] = mixColor.g\n+    colors[i3 + 2] = mixColor.b\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1672027872086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,8 @@\n     const i3 = i * 3\n     const radius = Math.random() * params.radius\n     const spinAgnle = radius * params.spin\n     const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n-    if (i < 20) {\n-      console.log(i, branchesAngle)\n-    }\n     function ranPow(math) {\n       return Math.pow(math, params.randomnessPow) * (Math.random() > 0.5 ? 1 : -1)\n     }\n \n@@ -72,8 +69,11 @@\n     mixColor.lerp(colorOut, radius / params.radius)\n     colors[i3] = mixColor.r\n     colors[i3 + 1] = mixColor.g\n     colors[i3 + 2] = mixColor.b\n+    if (i < 20) {\n+      console.log(i, mixColor)\n+    }\n   }\n   galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n   galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n   galaxyMaterial = new THREE.PointsMaterial({\n"
                },
                {
                    "date": 1672027911216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n   branches: 3,\n   spin: 1,\n   randomness: 2,\n   randomnessPow: 2,\n-  inColor: 0xff7777,\n-  outColor: 0x7777ff,\n+  inColor: 'ff7777',\n+  outColor: '7777ff',\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n"
                },
                {
                    "date": 1672027930488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n   branches: 3,\n   spin: 1,\n   randomness: 2,\n   randomnessPow: 2,\n-  inColor: 'ff7777',\n-  outColor: '7777ff',\n+  inColor: '#ff7777',\n+  outColor: '#7777ff',\n }\n const gui = new dat.GUI({ width: 400 })\n let galaxyGeometry = null\n let galaxyPoints = null\n"
                },
                {
                    "date": 1672027985531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n   }\n   galaxyGeometry = new THREE.BufferGeometry()\n   const position = new Float32Array(params.count * 3)\n   const colors = new Float32Array(params.count * 3)\n-  const colorIn = new THREE.Color(params.colorIn)\n-  const colorOut = new THREE.Color(params.colorOut)\n+  const colorIn = new THREE.Color(params.inColor)\n+  const colorOut = new THREE.Color(params.outColor)\n \n   console.log(colorIn)\n   for (let i = 0; i < params.count * 3; i++) {\n     const i3 = i * 3\n"
                },
                {
                    "date": 1672028015251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n     position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomZ\n \n     const mixColor = colorIn.clone()\n     mixColor.lerp(colorOut, radius / params.radius)\n+\n     colors[i3] = mixColor.r\n     colors[i3 + 1] = mixColor.g\n     colors[i3 + 2] = mixColor.b\n     if (i < 20) {\n"
                },
                {
                    "date": 1672112399146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,9 @@\n \n import * as THREE from 'three'\n \n import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n-import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\n-import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\n import * as dat from 'dat.gui'\n-import { AdditiveBlending } from 'three'\n \n const select = (e) => document.querySelector(e)\n \n // Settings\n@@ -18,90 +15,11 @@\n \n // Materials\n const loadingManager = new THREE.LoadingManager()\n const textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\n-const particleTexture = textureLoader.load('particles/2.png')\n+\n // MESH\n-const params = {\n-  count: 10000,\n-  size: 0.1,\n-  radius: 5,\n-  branches: 3,\n-  spin: 1,\n-  randomness: 2,\n-  randomnessPow: 2,\n-  inColor: '#ff7777',\n-  outColor: '#7777ff',\n-}\n-const gui = new dat.GUI({ width: 400 })\n-let galaxyGeometry = null\n-let galaxyPoints = null\n-let galaxyMaterial = null\n-const generateGalaxy = () => {\n-  if (galaxyPoints !== null) {\n-    galaxyGeometry.dispose()\n-    galaxyMaterial.dispose()\n-    scene.remove(galaxyPoints)\n-  }\n-  galaxyGeometry = new THREE.BufferGeometry()\n-  const position = new Float32Array(params.count * 3)\n-  const colors = new Float32Array(params.count * 3)\n-  const colorIn = new THREE.Color(params.inColor)\n-  const colorOut = new THREE.Color(params.outColor)\n \n-  console.log(colorIn)\n-  for (let i = 0; i < params.count * 3; i++) {\n-    const i3 = i * 3\n-    const radius = Math.random() * params.radius\n-    const spinAgnle = radius * params.spin\n-    const branchesAngle = ((i % params.branches) / params.branches) * Math.PI * 2\n-    function ranPow(math) {\n-      return Math.pow(math, params.randomnessPow) * (Math.random() > 0.5 ? 1 : -1)\n-    }\n-\n-    const randomX = ranPow(Math.random())\n-    const randomY = ranPow(Math.random())\n-    const randomZ = ranPow(Math.random())\n-    position[i3 + 0] = Math.cos(branchesAngle + spinAgnle) * radius + randomX\n-    position[i3 + 1] = randomY\n-    position[i3 + 2] = Math.sin(branchesAngle + spinAgnle) * radius + randomZ\n-\n-    const mixColor = colorIn.clone()\n-    mixColor.lerp(colorOut, radius / params.radius)\n-\n-    colors[i3] = mixColor.r\n-    colors[i3 + 1] = mixColor.g\n-    colors[i3 + 2] = mixColor.b\n-    if (i < 20) {\n-      console.log(i, mixColor)\n-    }\n-  }\n-  galaxyGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\n-  galaxyGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n-  galaxyMaterial = new THREE.PointsMaterial({\n-    color: 0xffffff,\n-    size: params.size,\n-    sizeAttenuation: true,\n-    transparent: true,\n-    alphaMap: particleTexture,\n-    depthWrite: false,\n-    blending: AdditiveBlending,\n-    vertexColors: true,\n-  })\n-  galaxyPoints = new THREE.Points(galaxyGeometry, galaxyMaterial)\n-  scene.add(galaxyPoints)\n-}\n-generateGalaxy()\n-gui.add(params, 'count').min(10).max(100000).step(10).onFinishChange(generateGalaxy)\n-gui.add(params, 'size').min(0.001).max(1).step(0.001).onFinishChange(generateGalaxy)\n-gui.add(params, 'radius').min(0.001).max(20).step(0.001).onFinishChange(generateGalaxy)\n-gui.add(params, 'branches').min(2).max(20).step(1).onFinishChange(generateGalaxy)\n-gui.add(params, 'spin').min(-5).max(5).step(0.001).onFinishChange(generateGalaxy)\n-gui.add(params, 'randomness').min(0).max(2).step(0.001).onFinishChange(generateGalaxy)\n-gui.add(params, 'randomnessPow').min(1).max(10).step(0.001).onFinishChange(generateGalaxy)\n-gui.addColor(params, 'inColor').onFinishChange(generateGalaxy)\n-gui.addColor(params, 'outColor').onFinishChange(generateGalaxy)\n-\n // const g1 = generateGalaxy()\n // scene.add(g1)\n // Light\n \n"
                }
            ],
            "date": 1671891773639,
            "name": "Commit-0",
            "content": "import './style.styl'\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\nimport * as dat from 'dat.gui'\n\nconst select = (e) => document.querySelector(e)\n\n// Settings\nconst canvas = select('canvas.ca')\nlet devicePixelRatio = Math.min(window.devicePixelRatio, 2)\nconst scene = new THREE.Scene()\nlet sizes = { width: window.innerWidth, height: window.innerHeight }\nconst sceneColor = 0x330077\n// Scene\nconst fog = new THREE.Fog(sceneColor, 2, 20)\nscene.fog = fog\n\n// Materials\nconst loadingManager = new THREE.LoadingManager()\nconst textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\nconst doorColorTexture = textureLoader.load('door/color.jpg')\nconst doorAlphaTexture = textureLoader.load('door/alpha.jpg')\nconst doorAmbientOcclusionTexture = textureLoader.load('door/ambientocclusion.jpg')\nconst doorHeightTexture = textureLoader.load('door/height.jpg')\nconst doorNormalTexture = textureLoader.load('door/normal.jpg')\nconst doorRoughnessTexture = textureLoader.load('door/roughness.jpg')\nconst doorMetalnessTexture = textureLoader.load('door/metalness.jpg')\n\nconst bricksColorTexture = textureLoader.load('/bricks/color.jpg')\nconst bricksAmbientOcclusionTexture = textureLoader.load('/bricks/ambientOcclusion.jpg')\nconst bricksNormalTexture = textureLoader.load('/bricks/normal.jpg')\nconst bricksRoughnessTexture = textureLoader.load('/bricks/roughness.jpg')\n\nconst grassColorTexture = textureLoader.load('/grass/color.jpg')\nconst grassAmbientOcclusionTexture = textureLoader.load('/grass/ambientOcclusion.jpg')\nconst grassNormalTexture = textureLoader.load('/grass/normal.jpg')\nconst grassRoughnessTexture = textureLoader.load('/grass/roughness.jpg')\n\ngrassColorTexture.repeat.set(8, 8)\ngrassAmbientOcclusionTexture.repeat.set(8, 8)\ngrassNormalTexture.repeat.set(8, 8)\ngrassRoughnessTexture.repeat.set(8, 8)\n\ngrassColorTexture = THREE.RepeatWrapping\ngrassAmbientOcclusionTexture = THREE.RepeatWrapping\ngrassNormalTexture = THREE.RepeatWrapping\ngrassRoughnessTexture = THREE.RepeatWrapping\n\nconst standartMaterial = new THREE.MeshStandardMaterial()\nstandartMaterial.roughness = 0.2\nstandartMaterial.metalness = 0.2\n\n// MESH\n\n// House\nconst house = new THREE.Group()\nscene.add(house)\n\nconst walls = new THREE.Mesh(\n  new THREE.BoxGeometry(2, 1, 2),\n  new THREE.MeshStandardMaterial({\n    map: bricksColorTexture,\n    aoMap: bricksAmbientOcclusionTexture,\n    normalMap: bricksNormalTexture,\n    roughnessMap: bricksRoughnessTexture,\n  })\n)\n\nwalls.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array, 2))\n\nwalls.position.y = 0.5\nhouse.add(walls)\nconst roof = new THREE.Mesh(new THREE.ConeGeometry(1.7, 1, 4), new THREE.MeshStandardMaterial({ color: 0x333300 }))\nroof.position.y = 1.5\nroof.rotation.y = Math.PI / 4\nhouse.add(roof)\nconst door = new THREE.Mesh(\n  new THREE.PlaneGeometry(0.9, 0.9, 100, 100),\n  new THREE.MeshStandardMaterial({\n    map: doorColorTexture,\n    transparent: true,\n    alphaMap: doorAlphaTexture,\n    aoMap: doorAmbientOcclusionTexture,\n    displacementMap: doorHeightTexture,\n    // wireframe: true,\n    displacementScale: 0.1,\n    normalMap: doorNormalTexture,\n    // metalness: doorMetalnessTexture,\n    roughness: doorRoughnessTexture,\n  })\n)\ndoor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array, 2))\ndoor.position.set(0, 0.4, 1.001)\nhouse.add(door)\n\n// Bush\nconst bushGeometry = new THREE.SphereGeometry(1, 16, 16)\nconst bushMaterial = new THREE.MeshStandardMaterial({ color: 0x55aa55 })\n\nconst bush1 = new THREE.Mesh(bushGeometry, bushMaterial)\nconst bush2 = new THREE.Mesh(bushGeometry, bushMaterial)\nbush1.scale.set(0.2, 0.2, 0.2)\nbush1.position.set(0.7, 0.2, 1.3)\nbush2.scale.set(0.1, 0.1, 0.1)\nbush2.position.set(-0.5, 0.1, 1.3)\nhouse.add(bush1, bush2)\n\n// Graves\nconst graves = new THREE.Group()\nconst graveGeometry = new THREE.BoxGeometry(0.3, 0.4, 0.1)\nconst graveMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 })\nfor (let i = 0; i < 50; i++) {\n  const angle = Math.random() * Math.PI * 2\n  const radius = 3 + Math.random() * 5\n  const x = Math.sin(angle) * radius\n  const z = Math.cos(angle) * radius\n  const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n  grave.position.set(x, 0.19, z)\n  grave.rotation.y = (Math.random() - 0.5) / 3\n  grave.rotation.z = (Math.random() - 0.5) / 5\n  graves.add(grave)\n}\nscene.add(graves)\nconst floor = new THREE.Mesh(\n  new THREE.PlaneGeometry(40, 40),\n  new THREE.MeshStandardMaterial({\n    map: grassColorTexture,\n    aoMap: grassAmbientOcclusionTexture,\n    normalMap: grassNormalTexture,\n    roughnessMap: grassRoughnessTexture,\n  })\n)\nfloor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array, 2))\n\nfloor.rotation.x = -Math.PI / 2\nscene.add(floor)\n\n// Light\nconst ambientLight = new THREE.AmbientLight(0x4444ff, 0.8)\nconst directionLight = new THREE.DirectionalLight(0x3333ff, 0.8)\ndirectionLight.position.set(2, 2, 2)\nconst doorLight = new THREE.PointLight(0xff3300, 2, 10)\ndoorLight.position.set(0, 1.1, 1.5)\nscene.add(ambientLight, directionLight, doorLight)\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\ncamera.position.z = 4\ncamera.position.y = 1\ncamera.position.x = 1\nscene.add(camera)\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas })\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(devicePixelRatio)\nrenderer.setClearColor(sceneColor)\n// Controls\nconst gui = new dat.GUI()\ngui.hide()\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n// Updated\nconst tick = () => {\n  controls.update()\n  requestAnimationFrame(tick)\n  renderer.render(scene, camera)\n}\n\ntick()\n\nwindow.addEventListener('resize', () => {\n  const updatedPR = Math.min(window.devicePixelRatio, 2)\n  if (devicePixelRatio != updatedPR) {\n    devicePixelRatio = updatedPR\n    renderer.setPixelRatio(devicePixelRatio)\n  }\n  sizes = { width: window.innerWidth, height: window.innerHeight }\n  camera.aspect = sizes.width / sizes.height\n  camera.updateProjectionMatrix()\n  renderer.setSize(sizes.width, sizes.height)\n})\n"
        }
    ]
}