{
    "sourceFile": "main 1225 0 particles.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1671917015588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1671917015588,
            "name": "Commit-0",
            "content": "import './style.styl'\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\nimport * as dat from 'dat.gui'\nimport { AdditiveBlending } from 'three'\n\nconst select = (e) => document.querySelector(e)\n\n// Settings\nconst canvas = select('canvas.ca')\nlet devicePixelRatio = Math.min(window.devicePixelRatio, 2)\nconst scene = new THREE.Scene()\nlet sizes = { width: window.innerWidth, height: window.innerHeight }\n\n// Materials\nconst loadingManager = new THREE.LoadingManager()\nconst textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\nconst particleTexture = textureLoader.load('particles/2.png')\n\n// MESH\n\n// Particles\nconst particlesGeometry = new THREE.BufferGeometry()\nconst count = 50000\nconst position = new Float32Array(count * 3)\nconst color = new Float32Array(count * 3)\nfor (var i = 0; i < count * 3; i++) {\n  position[i] = (Math.random() - 0.5) * 5\n  color[i] = Math.random()\n}\nparticlesGeometry.setAttribute('position', new THREE.BufferAttribute(position, 3))\nparticlesGeometry.setAttribute('color', new THREE.BufferAttribute(color, 3))\nconst particlesMaterial = new THREE.PointsMaterial({\n  size: 0.1,\n  sizeAttenuation: true,\n  transparent: true,\n  alphaMap: particleTexture,\n  // color: [color, 3],\n  // alphaTest: 0.001,\n  // depthTest: false,\n  depthWrite: false,\n  blending: AdditiveBlending,\n  vertexColors: true,\n})\n// scene.add(new THREE.Mesh(new THREE.BoxGeometry(), new THREE.MeshBasicMaterial()))\n// Points\nconst particles = new THREE.Points(particlesGeometry, particlesMaterial)\nscene.add(particles)\n\n// Light\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\ncamera.position.z = 4\ncamera.position.y = 1\ncamera.position.x = 1\nscene.add(camera)\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas })\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(devicePixelRatio)\n// Controls\nconst gui = new dat.GUI()\ngui.hide()\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\nconst clock = new THREE.Clock()\n// Updated\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime()\n  // update particles\n  // particles.position.y = -elapsedTime * 0.02\n  for (var i = 0; i < count; i++) {\n    const i3 = i * 3\n    const x = particlesGeometry.attributes.position.array[i3]\n    particlesGeometry.attributes.position.array[i3 + 1] = Math.sin(elapsedTime + x)\n  }\n  particlesGeometry.attributes.position.needsUpdate = true\n  controls.update()\n  requestAnimationFrame(tick)\n  renderer.render(scene, camera)\n}\n\ntick()\n\nwindow.addEventListener('resize', () => {\n  const updatedPR = Math.min(window.devicePixelRatio, 2)\n  if (devicePixelRatio != updatedPR) {\n    devicePixelRatio = updatedPR\n    renderer.setPixelRatio(devicePixelRatio)\n  }\n  sizes = { width: window.innerWidth, height: window.innerHeight }\n  camera.aspect = sizes.width / sizes.height\n  camera.updateProjectionMatrix()\n  renderer.setSize(sizes.width, sizes.height)\n})\n"
        }
    ]
}