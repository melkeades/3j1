{
    "sourceFile": "main 1224 18 hous.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1671895066396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1671912864786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,45 +175,11 @@\n gui.hide()\n const controls = new OrbitControls(camera, canvas)\n controls.enableDamping = true\n \n-// Shadows\n-renderer.shadowMap.enabled = true\n-renderer.shadowMap.type = THREE.PCFSoftShadowMap\n-directionLight.castShadow = true\n-doorLight.castShadow = true\n-ghost1.castShadow = true\n-ghost2.castShadow = true\n-ghost3.castShadow = true\n-walls.castShadow = true\n-bush1.castShadow = true\n-bush2.castShadow = true\n-floor.receiveShadow = true\n-\n-doorLight.shadow.mapSize.width = 256\n-doorLight.shadow.mapSize.height = 256\n-doorLight.shadow.camera.far = 7\n-\n const clock = new THREE.Clock()\n // Updated\n const tick = () => {\n-  const elapsedTime = clock.getElapsedTime()\n-\n-  const ghost1Angle = elapsedTime * 0.8\n-  ghost1.position.x = Math.cos(ghost1Angle) * 3\n-  ghost1.position.z = Math.sin(ghost1Angle) * 3\n-  ghost1.position.y = Math.sin(ghost1Angle) * 2\n-\n-  const ghost2Angle = -elapsedTime * 0.7\n-  ghost2.position.x = Math.cos(ghost2Angle) * 3\n-  ghost2.position.z = Math.sin(ghost2Angle) * 3\n-  ghost2.position.y = Math.sin(ghost2Angle) * 2\n-\n-  const ghost3Angle = elapsedTime * 0.9\n-  ghost3.position.x = Math.cos(ghost3Angle) * 3\n-  ghost3.position.z = Math.sin(ghost3Angle) * 3\n-  ghost3.position.y = Math.sin(ghost3Angle) * 2\n-\n   controls.update()\n   requestAnimationFrame(tick)\n   renderer.render(scene, camera)\n }\n"
                }
            ],
            "date": 1671895066396,
            "name": "Commit-0",
            "content": "import './style.styl'\n\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader'\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\nimport * as dat from 'dat.gui'\n\nconst select = (e) => document.querySelector(e)\n\n// Settings\nconst canvas = select('canvas.ca')\nlet devicePixelRatio = Math.min(window.devicePixelRatio, 2)\nconst scene = new THREE.Scene()\nlet sizes = { width: window.innerWidth, height: window.innerHeight }\nconst sceneColor = 0x330077\n// Scene\nconst fog = new THREE.Fog(sceneColor, 2, 20)\nscene.fog = fog\n\n// Materials\nconst loadingManager = new THREE.LoadingManager()\nconst textureLoader = new THREE.TextureLoader(loadingManager).setPath('/static/textures/')\nconst doorColorTexture = textureLoader.load('door/color.jpg')\nconst doorAlphaTexture = textureLoader.load('door/alpha.jpg')\nconst doorAmbientOcclusionTexture = textureLoader.load('door/ambientocclusion.jpg')\nconst doorHeightTexture = textureLoader.load('door/height.jpg')\nconst doorNormalTexture = textureLoader.load('door/normal.jpg')\nconst doorRoughnessTexture = textureLoader.load('door/roughness.jpg')\nconst doorMetalnessTexture = textureLoader.load('door/metalness.jpg')\n\nconst bricksColorTexture = textureLoader.load('/bricks/color.jpg')\nconst bricksAmbientOcclusionTexture = textureLoader.load('/bricks/ambientOcclusion.jpg')\nconst bricksNormalTexture = textureLoader.load('/bricks/normal.jpg')\nconst bricksRoughnessTexture = textureLoader.load('/bricks/roughness.jpg')\n\nconst grassColorTexture = textureLoader.load('/grass/color.jpg')\nconst grassAmbientOcclusionTexture = textureLoader.load('/grass/ambientOcclusion.jpg')\nconst grassNormalTexture = textureLoader.load('/grass/normal.jpg')\nconst grassRoughnessTexture = textureLoader.load('/grass/roughness.jpg')\n\ngrassColorTexture.repeat.set(16, 16)\ngrassAmbientOcclusionTexture.repeat.set(16, 16)\ngrassNormalTexture.repeat.set(16, 16)\ngrassRoughnessTexture.repeat.set(16, 16)\n\ngrassColorTexture.wrapS = THREE.RepeatWrapping\ngrassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping\ngrassNormalTexture.wrapS = THREE.RepeatWrapping\ngrassRoughnessTexture.wrapS = THREE.RepeatWrapping\n\ngrassColorTexture.wrapT = THREE.RepeatWrapping\ngrassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping\ngrassNormalTexture.wrapT = THREE.RepeatWrapping\ngrassRoughnessTexture.wrapT = THREE.RepeatWrapping\n\nconst standartMaterial = new THREE.MeshStandardMaterial()\nstandartMaterial.roughness = 0.2\nstandartMaterial.metalness = 0.2\n\n// MESH\n\n// House\nconst house = new THREE.Group()\nscene.add(house)\n\nconst walls = new THREE.Mesh(\n  new THREE.BoxGeometry(2, 1, 2),\n  new THREE.MeshStandardMaterial({\n    map: bricksColorTexture,\n    aoMap: bricksAmbientOcclusionTexture,\n    normalMap: bricksNormalTexture,\n    roughnessMap: bricksRoughnessTexture,\n  })\n)\n\nwalls.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array, 2))\n\nwalls.position.y = 0.5\nhouse.add(walls)\nconst roof = new THREE.Mesh(new THREE.ConeGeometry(1.7, 1, 4), new THREE.MeshStandardMaterial({ color: 0x333300 }))\nroof.position.y = 1.5\nroof.rotation.y = Math.PI / 4\nhouse.add(roof)\nconst door = new THREE.Mesh(\n  new THREE.PlaneGeometry(0.9, 0.9, 100, 100),\n  new THREE.MeshStandardMaterial({\n    map: doorColorTexture,\n    transparent: true,\n    alphaMap: doorAlphaTexture,\n    aoMap: doorAmbientOcclusionTexture,\n    displacementMap: doorHeightTexture,\n    // wireframe: true,\n    displacementScale: 0.1,\n    normalMap: doorNormalTexture,\n    // metalness: doorMetalnessTexture,\n    roughness: doorRoughnessTexture,\n  })\n)\ndoor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array, 2))\ndoor.position.set(0, 0.4, 1.001)\nhouse.add(door)\n\n// Bush\nconst bushGeometry = new THREE.SphereGeometry(1, 16, 16)\nconst bushMaterial = new THREE.MeshStandardMaterial({ color: 0x55aa55 })\n\nconst bush1 = new THREE.Mesh(bushGeometry, bushMaterial)\nconst bush2 = new THREE.Mesh(bushGeometry, bushMaterial)\nbush1.scale.set(0.2, 0.2, 0.2)\nbush1.position.set(0.7, 0.2, 1.3)\nbush2.scale.set(0.1, 0.1, 0.1)\nbush2.position.set(-0.5, 0.1, 1.3)\nhouse.add(bush1, bush2)\n\n// Graves\nconst graves = new THREE.Group()\nconst graveGeometry = new THREE.BoxGeometry(0.3, 0.4, 0.1)\nconst graveMaterial = new THREE.MeshStandardMaterial({ color: 0x333333 })\nfor (let i = 0; i < 50; i++) {\n  const angle = Math.random() * Math.PI * 2\n  const radius = 2.5 + Math.random() * 5\n  const x = Math.sin(angle) * radius\n  const z = Math.cos(angle) * radius\n  const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n  grave.position.set(x, 0.19, z)\n  grave.rotation.y = (Math.random() - 0.5) / 3\n  grave.rotation.z = (Math.random() - 0.5) / 5\n  grave.castShadow = true\n  graves.add(grave)\n}\nscene.add(graves)\nconst floor = new THREE.Mesh(\n  new THREE.PlaneGeometry(40, 40),\n  new THREE.MeshStandardMaterial({\n    map: grassColorTexture,\n    aoMap: grassAmbientOcclusionTexture,\n    normalMap: grassNormalTexture,\n    roughnessMap: grassRoughnessTexture,\n  })\n)\nfloor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array, 2))\n\nfloor.rotation.x = -Math.PI / 2\nscene.add(floor)\n\n// Light\nconst ambientLight = new THREE.AmbientLight(0x4444ff, 0.8)\nconst directionLight = new THREE.DirectionalLight(0x3333ff, 0.8)\ndirectionLight.position.set(2, 2, 2)\nconst doorLight = new THREE.PointLight(0xaa3300, 2, 10)\ndoorLight.position.set(0, 1.1, 1.5)\nscene.add(ambientLight, directionLight, doorLight)\n\n// Ghosts\nconst ghost1 = new THREE.PointLight(0xff0000, 2, 3)\nconst ghost2 = new THREE.PointLight(0x0000ff, 2, 3)\nconst ghost3 = new THREE.PointLight(0x00ff00, 2, 3)\nscene.add(ghost1, ghost2, ghost3)\n\n// Camera\nconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 0.1, 200)\ncamera.position.z = 4\ncamera.position.y = 1\ncamera.position.x = 1\nscene.add(camera)\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas })\nrenderer.setSize(sizes.width, sizes.height)\nrenderer.setPixelRatio(devicePixelRatio)\nrenderer.setClearColor(sceneColor)\n// Controls\nconst gui = new dat.GUI()\ngui.hide()\nconst controls = new OrbitControls(camera, canvas)\ncontrols.enableDamping = true\n\n// Shadows\nrenderer.shadowMap.enabled = true\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\ndirectionLight.castShadow = true\ndoorLight.castShadow = true\nghost1.castShadow = true\nghost2.castShadow = true\nghost3.castShadow = true\nwalls.castShadow = true\nbush1.castShadow = true\nbush2.castShadow = true\nfloor.receiveShadow = true\n\ndoorLight.shadow.mapSize.width = 256\ndoorLight.shadow.mapSize.height = 256\ndoorLight.shadow.camera.far = 7\n\nconst clock = new THREE.Clock()\n// Updated\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime()\n\n  const ghost1Angle = elapsedTime * 0.8\n  ghost1.position.x = Math.cos(ghost1Angle) * 3\n  ghost1.position.z = Math.sin(ghost1Angle) * 3\n  ghost1.position.y = Math.sin(ghost1Angle) * 2\n\n  const ghost2Angle = -elapsedTime * 0.7\n  ghost2.position.x = Math.cos(ghost2Angle) * 3\n  ghost2.position.z = Math.sin(ghost2Angle) * 3\n  ghost2.position.y = Math.sin(ghost2Angle) * 2\n\n  const ghost3Angle = elapsedTime * 0.9\n  ghost3.position.x = Math.cos(ghost3Angle) * 3\n  ghost3.position.z = Math.sin(ghost3Angle) * 3\n  ghost3.position.y = Math.sin(ghost3Angle) * 2\n\n  controls.update()\n  requestAnimationFrame(tick)\n  renderer.render(scene, camera)\n}\n\ntick()\n\nwindow.addEventListener('resize', () => {\n  const updatedPR = Math.min(window.devicePixelRatio, 2)\n  if (devicePixelRatio != updatedPR) {\n    devicePixelRatio = updatedPR\n    renderer.setPixelRatio(devicePixelRatio)\n  }\n  sizes = { width: window.innerWidth, height: window.innerHeight }\n  camera.aspect = sizes.width / sizes.height\n  camera.updateProjectionMatrix()\n  renderer.setSize(sizes.width, sizes.height)\n})\n"
        }
    ]
}